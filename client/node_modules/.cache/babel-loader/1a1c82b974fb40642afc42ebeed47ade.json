{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/table/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport SearchBar from './SearchBar';\nimport Papa from 'papaparse';\nimport { default as Modal } from '../feedback/Modal';\nimport { default as Alert } from '../feedback/Alert';\n/*\nRepresents visual representation of actual database.\n*/\n\nclass Table extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.parseCsv = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.parseData_table = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      console.log(result.meta.fields);\n      console.log(result.data);\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: style\n        });\n      });\n      parsedColumns[0]['editable'] = 'onAdd';\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      console.log(parsedColumns);\n      console.log(parsedData);\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData_table = this.parseData_table(result),\n            newColumns = _this$parseData_table.newColumns,\n            newData = _this$parseData_table.newData;\n\n      this.setState({\n        isLoading: true\n      });\n      this.addAllDataToDb(newData).then(success => {\n        if (success) {\n          this.setState({\n            columns: newColumns,\n            data: newData,\n            dataCopy: newData\n          });\n          console.log(newData);\n          console.log(this.state.data);\n          console.log(\"copy is\");\n          console.log(this.state.dataCopy);\n          this.setAlert(true);\n          this.setState({\n            //isLoading: false,\n            isLoaded: true\n          });\n        } else {\n          this.setAlert(false);\n        }\n\n        this.setState({\n          isLoading: false\n        });\n      }); //.catch(failureCallback);\n    };\n\n    this.addAllDataToDb = data => {\n      return fetch(new Request('/db/addAll', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.addDataToDb = data => {\n      return fetch(new Request('/db/add', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.updateDataInDb = data => {\n      return fetch(new Request('/db/update', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.deleteDataFromDb = data => {\n      return fetch(new Request('/db/delete', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.setSelectedCategoryData = category => {\n      var newData = [];\n      this.state.data.forEach(function (data) {\n        newData.push(data[category]);\n      });\n      newData.sort(this.compare);\n      this.props.setChartData({\n        column: category.toUpperCase(),\n        data: newData\n      });\n    };\n\n    this.setAlert = bool => {\n      this.setState({\n        success: bool\n      });\n      this.setState({\n        success: null\n      });\n    };\n\n    this.setSearchResult = (newKeyword, newData) => {\n      this.setState({\n        keyword: newKeyword,\n        data: newData\n      });\n      console.log(this.state.page);\n      /*\n      console.log(\"called\");\n      console.log();\n      console.log(newData);\n      this.setState(\n      {data: newData,\n      keyword: newKeyword\n      },\n        () => {\n             console.log(\"SERACH RESULTS\");\n              console.log(this.state.data);\n            })\n      */\n    };\n\n    this.resetSearchResult = () => {\n      this.setState({\n        data: this.state.dataCopy,\n        keyword: ''\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        className: \"Section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"contained-button-file\",\n        type: \"file\",\n        accept: \".csv\",\n        onChange: this.parseCsv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"uploadBtn\",\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"Upload CSV File\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          search: false,\n          toolbarButtonAlignment: 'left',\n          headerStyle: style,\n          addRowPosition: 'first',\n          emptyRowsWhenPaging: false\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.addDataToDb(newData).then(success => {\n                if (success) {\n                  const ndata = this.state.data;\n                  ndata.push(newData);\n                  const ndataCopy = this.state.dataCopy;\n                  ndataCopy.push(newData);\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => {\n                    resolve();\n                  });\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.updateDataInDb(newData).then(success => {\n                if (success) {\n                  const ndata = this.state.data;\n                  const index = ndata.indexOf(oldData);\n                  ndata[index] = newData;\n                  const ndataCopy = this.state.dataCopy;\n                  const index_copy = ndataCopy.findIndex(i => i.passengerid == oldData[\"passengerid\"]);\n                  console.log(index_copy);\n                  ndataCopy[index_copy] = newData;\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.deleteDataFromDb(oldData).then(success => {\n                if (success) {\n                  let ndata = this.state.data;\n                  const index = ndata.indexOf(oldData);\n                  ndata.splice(index, 1);\n                  let ndataCopy = this.state.dataCopy;\n                  const index_copy = ndataCopy.findIndex(i => i.passengerid == oldData[\"passengerid\"]);\n                  ndataCopy.splice(index_copy, 1);\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          })\n        },\n        localization: {\n          header: {\n            actions: ''\n          },\n          body: {\n            emptyDataSourceMessage: 'No Data to Display'\n          }\n        },\n        components: {\n          Toolbar: props => React.createElement(\"div\", {\n            div: true,\n            style: {\n              backgroundColor: '#e8eaf5'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 372\n            },\n            __self: this\n          }, React.createElement(MTableToolbar, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373\n            },\n            __self: this\n          })), React.createElement(SearchBar, {\n            keyword: this.state.keyword,\n            setSearchResult: this.setSearchResult.bind(this),\n            resetSearchResult: this.resetSearchResult.bind(this),\n            disabled: !this.state.isLoaded,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 374\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        columns: this.state.columns,\n        setSelectedCategoryData: this.setSelectedCategoryData,\n        disabled: !this.state.isLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      })), React.createElement(Alert, {\n        success: this.state.success,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      isLoaded: false,\n      success: null,\n      dataCopy: [],\n      keyword: ''\n    };\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nconst style = {\n  padding: '0 8px'\n};\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/table/Table.js"],"names":["React","Component","MaterialTable","MTableToolbar","Button","SearchBar","Papa","default","Modal","Alert","Table","constructor","props","parseCsv","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","console","log","meta","fields","data","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","style","newData","key","hasOwnProperty","newColumns","setState","isLoading","addAllDataToDb","then","success","columns","dataCopy","state","setAlert","isLoaded","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","response","ok","catch","error","window","alert","message","addDataToDb","updateDataInDb","deleteDataFromDb","setSelectedCategoryData","category","sort","compare","setChartData","column","bool","setSearchResult","newKeyword","keyword","page","resetSearchResult","render","showTitle","search","toolbarButtonAlignment","headerStyle","addRowPosition","emptyRowsWhenPaging","onRowAdd","Promise","resolve","reject","setTimeout","ndata","ndataCopy","onRowUpdate","oldData","index","indexOf","index_copy","findIndex","i","passengerid","onRowDelete","splice","actions","emptyDataSourceMessage","Toolbar","backgroundColor","bind","a","b","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport SearchBar from './SearchBar';\nimport Papa from 'papaparse';\nimport { default as Modal } from '../feedback/Modal';\nimport { default as Alert } from '../feedback/Alert';\n\n/*\nRepresents visual representation of actual database.\n*/\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      isLoaded: false,\n      success:null,\n      dataCopy:[],\n      keyword:'',\n    };\n  }\n\n  parseCsv = (event) => {\n\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateTable\n    });\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    console.log(result.meta.fields);\n    console.log(result.data);\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: style,\n      });\n    });\n    (parsedColumns[0])['editable']='onAdd';\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key];\n        }\n      }\n      parsedData.push(newData);\n    });\n    console.log(parsedColumns);\n    console.log(parsedData);\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n  }\n\n  updateTable = (result) => {\n\n    const{ newColumns, newData } = this.parseData_table(result);\n\n    this.setState({\n      isLoading: true\n    });\n\n    this.addAllDataToDb(newData).then(success => {\n      if(success){\n        this.setState({\n          columns: newColumns,\n          data: newData,\n          dataCopy: newData\n        });\n        console.log(newData)\n        console.log(this.state.data);\n        console.log(\"copy is\");\n        console.log(this.state.dataCopy);\n        this.setAlert(true);\n        this.setState({\n          //isLoading: false,\n          isLoaded: true\n        });\n       } else{\n         this.setAlert(false);\n       }\n       this.setState({\n        isLoading: false,\n       });\n\n    });//.catch(failureCallback);\n}\n\n  addAllDataToDb = (data) => {\n    return fetch(new Request('/db/addAll', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  addDataToDb = (data) => {\n    return fetch(new Request('/db/add', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  updateDataInDb = (data) => {\n    return fetch(new Request('/db/update', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  deleteDataFromDb = (data) => {\n    return fetch(new Request('/db/delete', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setChartData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n  setAlert = (bool) => {\n    this.setState({\n      success: bool\n    });\n    this.setState({\n      success: null\n    });\n  }\n\n  setSearchResult = (newKeyword, newData) => {\n\n    this.setState({\n      keyword: newKeyword,\n      data: newData,\n    });\n\n\n    console.log(this.state.page);\n\n/*\nconsole.log(\"called\");\nconsole.log();\nconsole.log(newData);\nthis.setState(\n{data: newData,\nkeyword: newKeyword\n},\n  () => {\n       console.log(\"SERACH RESULTS\");\n        console.log(this.state.data);\n      })\n*/\n}\n\n  resetSearchResult  = () => {\n    this.setState({\n      data : this.state.dataCopy,\n      keyword : ''\n    });\n  }\n\n  render = () => {\n      return (\n        <div>\n          <h1>DB chart generator</h1>\n          <div className = 'Section'>\n            <input\n              id=\"contained-button-file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange = {this.parseCsv}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button id = 'uploadBtn' variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload CSV File\n              </Button>\n            </label>\n\n            <h2>Database Table</h2>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  search : false,\n                  toolbarButtonAlignment: 'left',\n                  headerStyle: style,\n                  addRowPosition:'first',\n                  emptyRowsWhenPaging: false,\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data= {this.state.data}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                            this.addDataToDb(newData).then(success => {\n                               if(success){\n                                  const ndata = this.state.data;\n                                  ndata.push(newData);\n\n                                  const ndataCopy = this.state.dataCopy;\n                                  ndataCopy.push(newData);\n\n                                  this.setState({ data : ndata, dataCopy: ndataCopy}, () => {\n                                                      resolve()});\n\n                                  this.setAlert(true);\n\n                                } else{\n                                  reject();\n                                  this.setAlert(false);\n                                }\n                            });\n                     }, 1000);\n                 }),\n               onRowUpdate: (newData, oldData) =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                       this.updateDataInDb(newData).then(success => {\n                          if(success){\n\n                            const ndata = this.state.data;\n                            const index = ndata.indexOf(oldData);\n                            ndata[index] = newData;\n\n                            const ndataCopy = this.state.dataCopy;\n                            const index_copy = ndataCopy.findIndex(i => i.passengerid == oldData[\"passengerid\"]);\n                            console.log(index_copy);\n                            ndataCopy[index_copy] = newData;\n\n                            this.setState({ data:ndata, dataCopy: ndataCopy}, () => resolve());\n                            this.setAlert(true);\n                           } else{\n                             reject();\n                             this.setAlert(false);\n                           }\n                       });\n                   }, 1000)\n                 }),\n               onRowDelete: oldData =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                       this.deleteDataFromDb(oldData).then(success => {\n                            if(success){\n\n                            let ndata = this.state.data;\n                            const index = ndata.indexOf(oldData);\n                            ndata.splice(index, 1);\n\n                            let ndataCopy = this.state.dataCopy;\n                            const index_copy = ndataCopy.findIndex(i => i.passengerid == oldData[\"passengerid\"]);\n                            ndataCopy.splice(index_copy,1);\n\n                            this.setState({ data:ndata, dataCopy: ndataCopy}, () => resolve());\n                            this.setAlert(true);\n                           } else{\n                             reject();\n                            this.setAlert(false);\n                           }\n                       });\n                   }, 1000)\n                 }),\n               }}\n               localization={{\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No Data to Display',\n                    }\n                }}\n                components={{\n                        Toolbar: props => (\n                                    <div div style={{ backgroundColor: '#e8eaf5' }}>\n                                      <MTableToolbar {...props} />\n                                        <SearchBar keyword = {this.state.keyword} setSearchResult = {this.setSearchResult.bind(this)} resetSearchResult = {this.resetSearchResult.bind(this)} disabled = {!this.state.isLoaded} />\n                                    </div>\n                                  )\n                }}\n             />\n            <Modal columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData} disabled = {!this.state.isLoaded}/>\n          </div>\n          <Alert success= {this.state.success}/>\n        </div>\n      );\n    }\n}\n\nconst style = { padding:'0 8px'}\n\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}