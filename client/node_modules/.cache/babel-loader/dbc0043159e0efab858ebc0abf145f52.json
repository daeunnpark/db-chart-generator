{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nclass Chart extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.parseData = props => {\n      var counts = this.countFrequency(props.data);\n      return {\n        newColumn: props.column,\n        newCategories: Object.keys(counts),\n        newBarChartData: Object.values(counts),\n        newPieChartData: this.parse_pie_helper(counts)\n      };\n    };\n\n    this.setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n      this.setState({\n        barChartSettings: {\n          title: {\n            text: newColumn\n          },\n          xAxis: {\n            categories: newCategories\n          },\n          series: [{\n            data: newBarChartData\n          }]\n        },\n        pieChartSettings: {\n          title: {\n            text: newColumn\n          },\n          series: [{\n            data: newPieChartData\n          }]\n        }\n      });\n    };\n\n    this.countFrequency = arr => {\n      var counts = {};\n\n      for (var i = 0; i < arr.length; i++) {\n        var data = arr[i];\n        counts[data] = counts[data] ? counts[data] + 1 : 1;\n      }\n\n      return counts;\n    };\n\n    this.parse_pie_helper = counts => {\n      var data = [];\n      Object.keys(counts).forEach(function (key) {\n        let dataObject = {};\n        dataObject = {\n          name: key,\n          y: counts[key]\n        };\n        data.push(dataObject);\n      });\n      return data;\n    };\n\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const _this$parseData = this.parseData(this.props),\n            newColumn = _this$parseData.newColumn,\n            newCategories = _this$parseData.newCategories,\n            newBarChartData = _this$parseData.newBarChartData,\n            newPieChartData = _this$parseData.newPieChartData;\n\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Charts\"), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.pieChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: ''\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  xAxis: {\n    categories: [1, 2],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Count (person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: []\n  }],\n  lang: {\n    noData: \"Your custom message\"\n  }\n};\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: ''\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n    noData: \"Your custom message\"\n  }\n};\nexport default Chart;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","parseData","counts","countFrequency","data","newColumn","column","newCategories","Object","keys","newBarChartData","values","newPieChartData","parse_pie_helper","setChartData","setState","barChartSettings","title","text","xAxis","categories","series","pieChartSettings","arr","i","length","forEach","key","dataObject","name","y","push","state","bar_options","pie_options","componentDidUpdate","prevProps","render","chart","type","subtitle","crosshair","yAxis","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","pointPadding","borderWidth","groupPadding","shadow","lang","noData","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format","colorByPoint"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const {\n        newColumn,\n        newCategories,\n        newBarChartData,\n        newPieChartData\n      } = this.parseData(this.props);\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  parseData = (props) => {\n    var counts = this.countFrequency(props.data);\n    return {\n      newColumn: props.column,\n      newCategories: Object.keys(counts),\n      newBarChartData: Object.values(counts),\n      newPieChartData: this.parse_pie_helper(counts)\n    };\n  }\n\n  setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n    this.setState({\n      barChartSettings: {\n        title: {\n          text: newColumn\n        },\n        xAxis: {\n          categories: newCategories\n        },\n        series: [{\n          data: newBarChartData\n        }]\n      },\n\n      pieChartSettings: {\n        title: {\n          text: newColumn\n        },\n        series: [{\n          data: newPieChartData\n        }]\n      }\n    });\n  }\n\n  countFrequency = (arr) => {\n    var counts = {};\n    for (var i = 0; i < arr.length; i++) {\n      var data = arr[i];\n      counts[data] = counts[data] ? counts[data] + 1 : 1;\n    }\n    return counts;\n  }\n\n  parse_pie_helper = (counts) => {\n    var data = [];\n    Object.keys(counts).forEach(function(key) {\n      let dataObject = {};\n      dataObject = {\n        name: key,\n        y: counts[key]\n      }\n      data.push(dataObject);\n    });\n    return data;\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>Charts</h3>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.barChartSettings}\n        />\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.pieChartSettings}\n        />\n      </div>\n    );\n  }\n}\n\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: ''\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  xAxis: {\n    categories: [\n      1,\n      2,\n    ],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Count (person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: []\n\n  }],\n  lang: {noData: \"Your custom message\"}\n}\n\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: ''\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {noData: \"Your custom message\"}\n}\n\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}