{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport \"../App.css\";\nimport Papa from 'papaparse';\nimport { default as Dialog } from './UpdateChartsDialog';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.search = () => {};\n\n    this.uploadCsvFile = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.updateTable = result => {\n      var NewColumns = [];\n      var NewData = [];\n      result.meta.fields.forEach(function (field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: {\n            padding: '0px'\n          }\n        });\n      });\n      result.data.forEach(function (data) {\n        let newObject = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newObject[key.toLowerCase()] = data[key];\n          }\n        }\n\n        NewData.push(newObject);\n      });\n      this.setState({\n        columns: NewColumns,\n        data: NewData\n      });\n      this.saveAllToDb();\n    };\n\n    this.saveAllToDb = () => {\n      //this.setState({isLoading : true})\n      console.log(this.state.isLoading);\n      fetch(new Request('/db/addAllData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(this.state.data)\n      }).then(response => console.log).catch(error => console.error);\n      console.log(this.state.isLoading); //this.setState({isLoading:false})\n    };\n\n    this.addOrUpdateToDb = data => {\n      fetch(new Request('/db/addOrUpdateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.deleteFromDb = data => {\n      fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.setData = column => {\n      console.log(\"SETDATA From TABLE\");\n      console.log(column);\n      var NewData = []; //var column = columns[0].title;\n\n      this.state.data.forEach(function (data) {\n        NewData.push(data[column]);\n      });\n      NewData.sort(this.compare);\n      console.log(NewData);\n      this.props.setData({\n        column: column.toUpperCase(),\n        data: NewData\n      });\n      /*\n      columns.forEach(function(column) {\n        data_state.forEach(function(data) {\n      \n          tempData.push(\n            data[column.field]\n          );\n      \n        });\n        tempData.sort();\n        NewData.push(tempData);\n      \n        NewColumns.push(column.title);\n        tempData=[];\n      });\n      \n        this.props.setData({\n          column: NewColumns,\n          data: NewData\n        });\n      \n      */\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        id: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        id: \"fileUploader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        accept: \".csv\",\n        type: \"file\",\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          toolbarButtonAlignment: \"left\",\n          headerStyle: {\n            padding: '0px'\n          },\n          addRowPosition: 'first'\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        search: true,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                this.addOrUpdateToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.addOrUpdateToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.deleteFromDb(oldData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(UpdateChartsDialog, {\n        columns: this.state.columns,\n        setData: this.setData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      charColumns: []\n    };\n  }\n\n  /*\n  \n  \n  console.log(\"SETDATA From TABLE\");\n  console.log(columns);\n  \n  var NewData = [];\n  var column = columns[0].title;\n  \n  this.state.data.forEach(function(data) {\n    NewData.push(\n      data[column]\n    );\n  });\n  NewData.sort(this.compare);\n  this.props.setData({\n    column: column.toUpperCase(),\n    data: NewData\n  });\n   */\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","Papa","default","Dialog","Table","constructor","props","search","uploadCsvFile","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","result","NewColumns","NewData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","padding","data","newObject","key","hasOwnProperty","setState","columns","saveAllToDb","console","log","state","isLoading","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","then","response","catch","error","addOrUpdateToDb","deleteFromDb","setData","column","sort","compare","render","showTitle","toolbarButtonAlignment","headerStyle","addRowPosition","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","charColumns","a","b"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\n\nimport \"../App.css\"\n\nimport Papa from 'papaparse';\n\nimport {default as Dialog} from './UpdateChartsDialog';\n\nclass Table extends Component {\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    columns: [],\n    data: [],\n    isLoading: false,\n    charColumns:[]\n  };\n}\n\nsearch = () =>{\n\n\n}\n\nuploadCsvFile = (event) => {\n  Papa.parse(event.target.files[0], {\n    header: true,\n    skipEmptyLines: true,\n    dynamicTyping: true,\n    complete: this.updateTable\n  });\n}\n\n\nupdateTable = (result) => {\n\n  var NewColumns = [];\n  var NewData = [];\n\n  result.meta.fields.forEach(function(field) {\n    NewColumns.push({\n      title: field.toUpperCase(),\n      field: field.toLowerCase(),\n      cellStyle: { padding:'0px'}\n\n    });\n  });\n\n  result.data.forEach(function(data) {\n    let newObject = {};\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        newObject[key.toLowerCase()] = data[key]\n      }\n    }\n    NewData.push(newObject);\n  });\n\n  this.setState({\n    columns: NewColumns,\n    data: NewData\n  });\n\n  this.saveAllToDb();\n}\n\n\nsaveAllToDb = () => {\n\n  //this.setState({isLoading : true})\n  console.log(this.state.isLoading);\n\n  fetch(new Request('/db/addAllData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(this.state.data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n\n  console.log(this.state.isLoading);\n  //this.setState({isLoading:false})\n\n}\n\n\naddOrUpdateToDb = (data) => {\n\n  fetch(new Request('/db/addOrUpdateData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n\n}\n\n\ndeleteFromDb = (data) => {\n\n  fetch(new Request('/db/deleteData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n\n}\n\n\nsetData = (column) => {\n\n\n  console.log(\"SETDATA From TABLE\");\n  console.log(column);\n\n  var NewData = [];\n  //var column = columns[0].title;\n\n  this.state.data.forEach(function(data) {\n    NewData.push(\n      data[column]\n    );\n  });\n  NewData.sort(this.compare);\n  console.log(NewData);\n  this.props.setData({\n    column: column.toUpperCase(),\n    data: NewData\n  });\n\n\n/*\ncolumns.forEach(function(column) {\n  data_state.forEach(function(data) {\n\n    tempData.push(\n      data[column.field]\n    );\n\n  });\n  tempData.sort();\n  NewData.push(tempData);\n\n  NewColumns.push(column.title);\n  tempData=[];\n});\n\n  this.props.setData({\n    column: NewColumns,\n    data: NewData\n  });\n\n*/\n}\n\n/*\n\n\nconsole.log(\"SETDATA From TABLE\");\nconsole.log(columns);\n\nvar NewData = [];\nvar column = columns[0].title;\n\nthis.state.data.forEach(function(data) {\n  NewData.push(\n    data[column]\n  );\n});\nNewData.sort(this.compare);\nthis.props.setData({\n  column: column.toUpperCase(),\n  data: NewData\n});\n */\n\ncompare(a, b) {\n  if (typeof(a) == \"number\")  {\n    return a - b;\n  } else {\n    if (a > b) {\n           return 1;\n       }\n       if (b > a) {\n           return -1;\n       }\n       return 0;\n  }\n}\n\n\n\n\n\n  render = () => {\n      return (\n        <div id = \"\">\n        <h2>DB chart generator</h2>\n          <div id = \"fileUploader\">\n          <input\n            accept=\".csv\"\n            type=\"file\"\n            onChange = {this.uploadCsvFile}\n          />\n          </div>\n          <h3>Database Table</h3>\n\n          <MaterialTable\n             options={{\n                showTitle: false,\n                toolbarButtonAlignment: \"left\",\n                headerStyle: { padding:'0px'},\n                addRowPosition:'first'\n              }}\n            isLoading={this.state.isLoading}\n            columns={this.state.columns}\n            data={this.state.data}\n            search= {true}\n           editable={{\n             onRowAdd: newData =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     const data = this.state.data;\n                     data.push(newData);\n                     this.addOrUpdateToDb(newData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             onRowUpdate: (newData, oldData) =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     const data = this.state.data;\n                     const index = data.indexOf(oldData);\n                     data[index] = newData;\n                     this.addOrUpdateToDb(newData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             onRowDelete: oldData =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     let data = this.state.data;\n                     const index = data.indexOf(oldData);\n                     data.splice(index, 1);\n                     this.deleteFromDb(oldData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             }}\n           />\n\n        <UpdateChartsDialog columns = {this.state.columns} setData = {this.setData}/>\n      </div>\n      );\n      }\n}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}