{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport SearchBar from './SearchBar';\nimport Papa from 'papaparse';\nimport { default as Modal } from './Modal';\nimport { default as Alert } from './Alert';\n/*\nRepresents visual representation of actual database.\n*/\n\nclass Table extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.parseCsv = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.parseData_table = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: style\n        });\n      });\n      parsedColumns[0]['editable'] = 'onAdd';\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData_table = this.parseData_table(result),\n            newColumns = _this$parseData_table.newColumns,\n            newData = _this$parseData_table.newData;\n\n      this.setState({\n        columns: newColumns,\n        data: newData\n      });\n\n      if (this.addAllDataToDb(newData)) {}\n    };\n\n    this.addAllDataToDb = data => {\n      fetch(new Request('/db/addAllData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n      /*\n          var temp = this;\n      \n          this.state.data.forEach(function(data) {\n            temp.addDataToDb(data);\n          });*/\n    };\n\n    this.addDataToDb = data => {\n      return fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.updateDataInDb = data => {\n      return fetch(new Request('/db/updateData', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.deleteDataFromDb = data => {\n      return fetch(new Request('/db/deleteData', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.setSelectedCategoryData = category => {\n      var newData = [];\n      this.state.data.forEach(function (data) {\n        newData.push(data[category]);\n      });\n      newData.sort(this.compare);\n      this.props.setChartData({\n        column: category.toUpperCase(),\n        data: newData\n      });\n    };\n\n    this.setAlert = bool => {\n      this.setState({\n        success: bool\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        className: \"Section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"contained-button-file\",\n        type: \"file\",\n        accept: \".csv\",\n        onChange: this.parseCsv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"uploadBtn\",\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Upload CSV File\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          search: false,\n          toolbarButtonAlignment: 'left',\n          headerStyle: style,\n          addRowPosition: 'first'\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.addDataToDb(newData).then(success => {\n                if (success) {\n                  const data = this.state.data;\n                  data.push(newData);\n                  this.setState({\n                    data\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.updateDataInDb(newData).then(success => {\n                if (success) {\n                  const data = this.state.data;\n                  const index = data.indexOf(oldData);\n                  data[index] = newData;\n                  this.setState({\n                    data\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.deleteDataFromDb(oldData).then(success => {\n                if (success) {\n                  let data = this.state.data;\n                  const index = data.indexOf(oldData);\n                  data.splice(index, 1);\n                  this.setState({\n                    data\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          })\n        },\n        localization: {\n          header: {\n            actions: ''\n          },\n          body: {\n            emptyDataSourceMessage: 'No Data to Display'\n          }\n        },\n        components: {\n          Toolbar: props => React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293\n            },\n            __self: this\n          }, React.createElement(MTableToolbar, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294\n            },\n            __self: this\n          })), React.createElement(SearchBar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295\n            },\n            __self: this\n          }))\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        columns: this.state.columns,\n        setSelectedCategoryData: this.setSelectedCategoryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      })), React.createElement(Alert, {\n        success: this.state.success,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      success: false\n    };\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nconst style = {\n  padding: '0 8px'\n};\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","MTableToolbar","Button","SearchBar","Papa","default","Modal","Alert","Table","constructor","props","parseCsv","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","style","data","newData","key","hasOwnProperty","newColumns","setState","columns","addAllDataToDb","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","then","response","ok","catch","error","window","alert","message","addDataToDb","updateDataInDb","deleteDataFromDb","setSelectedCategoryData","category","state","sort","compare","setChartData","column","setAlert","bool","success","render","showTitle","search","toolbarButtonAlignment","headerStyle","addRowPosition","isLoading","onRowAdd","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","actions","emptyDataSourceMessage","Toolbar","a","b","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport SearchBar from './SearchBar';\nimport Papa from 'papaparse';\nimport { default as Modal } from './Modal';\nimport { default as Alert } from './Alert';\n\n/*\nRepresents visual representation of actual database.\n*/\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      success:false,\n    };\n  }\n\n  parseCsv = (event) => {\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateTable\n    });\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: style,\n      });\n    });\n    (parsedColumns[0])['editable']='onAdd';\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key]\n        }\n      }\n      parsedData.push(newData);\n    });\n\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n  }\n\n  updateTable = (result) => {\n    const{ newColumns, newData } = this.parseData_table(result);\n    this.setState({\n      columns: newColumns,\n      data: newData,\n    });\n    if(this.addAllDataToDb(newData)){\n      \n    }\n  }\n\n  addAllDataToDb = (data) => {\n    fetch(new Request('/db/addAllData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n/*\n    var temp = this;\n\n    this.state.data.forEach(function(data) {\n      temp.addDataToDb(data);\n    });*/\n\n  }\n\n  addDataToDb = (data) => {\n    return fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  updateDataInDb = (data) => {\n    return fetch(new Request('/db/updateData', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  deleteDataFromDb = (data) => {\n    return fetch(new Request('/db/deleteData', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setChartData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n  setAlert = (bool) => {\n    this.setState({\n      success: bool\n    });\n  }\n\n  render = () => {\n      return (\n        <div>\n          <h1>DB chart generator</h1>\n          <div className = 'Section'>\n            <input\n              id=\"contained-button-file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange = {this.parseCsv}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button id = 'uploadBtn' variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload CSV File\n              </Button>\n            </label>\n\n            <h2>Database Table</h2>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  search : false,\n                  toolbarButtonAlignment: 'left',\n                  headerStyle: style,\n                  addRowPosition:'first'\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data= {this.state.data}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                            this.addDataToDb(newData).then(success => {\n                               if(success){\n                                 const data = this.state.data;\n                                 data.push(newData);\n                                 this.setState({ data }, () => resolve());\n                                 this.setAlert(true);\n                                } else{\n                                  reject();\n                                  this.setAlert(false);\n                                }\n                            });\n                     }, 1000);\n                 }),\n               onRowUpdate: (newData, oldData) =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                       this.updateDataInDb(newData).then(success => {\n                          if(success){\n                            const data = this.state.data;\n                            const index = data.indexOf(oldData);\n                            data[index] = newData;\n                            this.setState({ data }, () => resolve());\n                            this.setAlert(true);\n                           } else{\n                             reject();\n                             this.setAlert(false);\n                           }\n                       });\n                   }, 1000)\n                 }),\n               onRowDelete: oldData =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                       this.deleteDataFromDb(oldData).then(success => {\n                          if(success){\n                            let data = this.state.data;\n                            const index = data.indexOf(oldData);\n                            data.splice(index, 1);\n                            this.setState({ data }, () => resolve());\n                            this.setAlert(true);\n                           } else{\n                             reject();\n                             this.setAlert(false);\n                           }\n                       });\n                   }, 1000)\n                 }),\n               }}\n               localization={{\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No Data to Display',\n                    }\n                }}\n                components={{\n                        Toolbar: props => (\n                                    <div>\n                                      <MTableToolbar {...props} />\n                                        <SearchBar/>\n                                    </div>\n                                  )\n                }}\n             />\n            <Modal columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData}/>\n          </div>\n          <Alert success= {this.state.success}/>\n        </div>\n      );\n    }\n}\n\nconst style = { padding:'0 8px'}\n\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}