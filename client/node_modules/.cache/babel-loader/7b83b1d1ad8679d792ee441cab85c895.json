{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\nimport \"../App.css\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.search = () => {};\n\n    this.parseCSV = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.parseData_table = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: style\n        });\n      });\n      console.log(parsedColumns[0]);\n      parsedColumns[0]['editable'] = 'onAdd';\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData_table = this.parseData_table(result),\n            newColumns = _this$parseData_table.newColumns,\n            newData = _this$parseData_table.newData;\n\n      this.setState({\n        columns: newColumns,\n        data: newData\n      });\n      this.addAllDataToDb();\n    };\n\n    this.addAllDataToDb = () => {\n      var temp = this;\n      this.state.data.map(function (data) {\n        if (temp.addDataToDb(data) === 0) {\n          console.log(\"reading stopped\");\n          return;\n        }\n      });\n    };\n\n    this.addDataToDb = data => {\n      fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        console.log(\"HEREEEE\");\n        return 1;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n        success = 0;\n      });\n    };\n\n    this.updateDataInDb = data => {\n      fetch(new Request('/db/updateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.deleteDataFromDb = data => {\n      fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.setSelectedCategoryData = category => {\n      var newData = [];\n      this.state.data.forEach(function (data) {\n        newData.push(data[category]);\n      });\n      newData.sort(this.compare);\n      this.props.setData({\n        column: category.toUpperCase(),\n        data: newData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        id: \"fileUploaderContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        accept: \".csv\",\n        type: \"file\",\n        onChange: this.parseCSV,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          toolbarButtonAlignment: \"left\",\n          headerStyle: style,\n          addRowPosition: 'first'\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        search: true,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                /* const data = this.state.data;\n                data.push(newData);\n                this.setState({ data }, () => resolve()); */\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.updateDataInDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.deleteFromDb(oldData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(Dialog, {\n        columns: this.state.columns,\n        setSelectedCategoryData: this.setSelectedCategoryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false\n    };\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nconst style = {\n  padding: '0px'\n};\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","Papa","MaterialTable","default","Dialog","Table","constructor","props","search","parseCSV","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","style","console","log","data","newData","key","hasOwnProperty","newColumns","setState","columns","addAllDataToDb","temp","state","map","addDataToDb","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","then","response","catch","error","window","alert","message","success","updateDataInDb","deleteDataFromDb","setSelectedCategoryData","category","sort","compare","setData","column","render","showTitle","toolbarButtonAlignment","headerStyle","addRowPosition","isLoading","onRowAdd","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","deleteFromDb","a","b","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Papa from 'papaparse';\n\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\nimport \"../App.css\"\n\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n    };\n  }\n\n  search = () => {\n\n  }\n\n  parseCSV = (event) => {\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateTable\n    });\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: style\n      });\n    });\n    console.log(parsedColumns[0]);\n    (parsedColumns[0])['editable']='onAdd';\n\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key]\n        }\n      }\n      parsedData.push(newData);\n    });\n\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n\n  }\n\n  updateTable = (result) => {\n    const{ newColumns, newData } = this.parseData_table(result);\n    this.setState({\n      columns: newColumns,\n      data: newData\n    });\n    this.addAllDataToDb();\n  }\n/*\n  handleErrors = (response) => {\n    var success = true;\n    console.log(response.status);\n    console.log(response.ok);\n    if(response.status ==400){\n      window.alert(\"PassengerID should be unique.\");\n      success= false;\n    }\n    return sucess;\n}\n*/\n  addAllDataToDb = () => {\n    var temp = this;\n    this.state.data.map(function(data) {\n      if(temp.addDataToDb(data)===0){\n        console.log(\"reading stopped\");\n        return;\n      }\n    });\n  }\n\n  addDataToDb = (data) => {\n\n    fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        console.log(\"HEREEEE\");\n        return 1;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n        success = 0;\n      });\n\n  }\n\n\n  updateDataInDb = (data) => {\n    fetch(new Request('/db/updateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .catch(error => console.error)\n  }\n\n  deleteDataFromDb = (data) => {\n    fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .catch(error => console.error)\n  }\n\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n    render = () => {\n        return (\n          <div>\n            <h2>DB chart generator</h2>\n              <div id = \"fileUploaderContainer\">\n                <input\n                  accept=\".csv\"\n                  type=\"file\"\n                  onChange = {this.parseCSV}\n                />\n              </div>\n            <h3>Database Table</h3>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  toolbarButtonAlignment: \"left\",\n                  headerStyle: style,\n                  addRowPosition:'first'\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data=  {this.state.data}\n              search = {true}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                         {\n                             /* const data = this.state.data;\n                             data.push(newData);\n                             this.setState({ data }, () => resolve()); */\n                         }\n                         resolve();\n                     }, 1000);\n                 }),\n               onRowUpdate: (newData, oldData) =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       const data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data[index] = newData;\n                       this.updateDataInDb(newData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               onRowDelete: oldData =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       let data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data.splice(index, 1);\n                       this.deleteFromDb(oldData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               }}\n             />\n          <Dialog columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData}/>\n        </div>\n        );\n      }\n}\n\nconst style = { padding:'0px' }\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}