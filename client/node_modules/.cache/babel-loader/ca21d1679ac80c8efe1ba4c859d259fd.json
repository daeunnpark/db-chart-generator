{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport Papa from 'papaparse'; // default param in const?\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); // Default\n\n    this.setData = () => {\n      console.log(this.state); //////\n      //////\n\n      var NewColumns = [];\n      var NewData = [];\n      this.props.setData({\n        columns: [this.state.columns[1].title, this.state.columns[2].title, this.state.columns[3].title],\n        data: [this.state.data[0], this.state.data[1]]\n      }); //this.setState(newState);\n    };\n\n    this.uploadCsvFile = event => {\n      event.preventDefault();\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.updateTable = result => {\n      var NewColumns = [];\n      var NewData = [];\n      result.meta.fields.forEach(function (field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase()\n        });\n      });\n      result.data.forEach(function (data) {\n        let newObject = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newObject[key.toLowerCase()] = data[key];\n          }\n        }\n\n        NewData.push(newObject);\n      });\n      this.setState({\n        columns: NewColumns,\n        data: NewData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Upload File\", React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        style: {\n          display: \"none\"\n        },\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(MaterialTable, {\n        title: \"Editable Preview\",\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.setData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"UpdateChart\"));\n    };\n\n    this.state = {\n      columns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'COL2',\n        field: 'col2',\n        type: 'numeric'\n      }, {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      }, {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      }],\n      data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      }, {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      }]\n    };\n  }\n\n  componentDidMount() {} //console.log(\"DID MOUNTTT\");\n  //this.setData(this.state);\n  // Table To Parent APP\n\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","Button","Papa","Table","constructor","props","setData","console","log","state","NewColumns","NewData","columns","title","data","uploadCsvFile","event","preventDefault","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","result","meta","fields","forEach","field","push","toUpperCase","toLowerCase","newObject","key","hasOwnProperty","setState","render","display","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","type","id","col2","col3","col4","componentDidMount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\n\nimport Papa from 'papaparse';\n\n// default param in const?\nclass Table extends Component {\n\n    constructor(props) {\n      super(props);\n      // Default\n      this.state = {\n        columns: [{\n            title: 'ID',\n            field: 'id'\n          },\n          {\n            title: 'COL2',\n            field: 'col2',\n            type: 'numeric'\n          },\n          {\n            title: 'COL3',\n            field: 'col3',\n            type: 'numeric'\n          },\n          {\n            title: 'COL4',\n            field: 'col4',\n            type: 'numeric'\n          },\n        ],\n\n        data: [{\n            id: \"A\",\n            col2: 80,\n            col3: 30,\n            col4: 40\n          },\n          {\n            id: \"B\",\n            col2: 30,\n            col3: 20,\n            col4: 10\n          },\n        ]\n      };\n    }\n\n    componentDidMount() {\n      //console.log(\"DID MOUNTTT\");\n      //this.setData(this.state);\n    }\n\n\n    // Table To Parent APP\n    setData = () => {\n      console.log(this.state);\n\n      //////\n      //////\n    var NewColumns = [];\n    var NewData = [];\n\n      this.props.setData({\n        columns: [\n          this.state.columns[1].title,\n          this.state.columns[2].title,\n          this.state.columns[3].title\n        ],\n        data: [\n          this.state.data[0],\n          this.state.data[1]\n        ]\n\n      });\n\n      //this.setState(newState);\n\n    }\n\n\n\n    uploadCsvFile = (event) => {\n      event.preventDefault();\n\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    }\n\n\n    updateTable = (result) => {\n\n      var NewColumns = [];\n      var NewData = [];\n\n      result.meta.fields.forEach(function(field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase()\n        });\n      });\n\n      result.data.forEach(function(data) {\n        let newObject = {};\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newObject[key.toLowerCase()] = data[key]\n          }\n        }\n        NewData.push(newObject);\n      });\n\n      this.setState({\n        columns: NewColumns,\n        data: NewData\n      });\n\n    }\n\n\n    render = () => {\n        return (\n          <div>\n            <Button\n            variant=\"contained\"\n            component=\"label\">\n            Upload File\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              style={{ display: \"none\" }}\n              onChange = {this.uploadCsvFile}\n            />\n            </Button>\n\n            <MaterialTable\n               title=\"Editable Preview\"\n               columns={this.state.columns}\n               data={this.state.data}\n               editable={{\n                 onRowAdd: newData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         const data = this.state.data;\n                         data.push(newData);\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowUpdate: (newData, oldData) =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n\n                         const data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data[index] = newData;\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowDelete: oldData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         let data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data.splice(index, 1);\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n               }}\n             />\n           <button onClick = {this.setData}>UpdateChart</button>\n        </div>\n        );\n        }\n}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}