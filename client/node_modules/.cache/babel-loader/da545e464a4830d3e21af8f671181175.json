{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport Button from '@material-ui/core/Button';\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.parseCsv = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.parseData_table = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: style\n        });\n      });\n      parsedColumns[0]['editable'] = 'onAdd';\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData_table = this.parseData_table(result),\n            newColumns = _this$parseData_table.newColumns,\n            newData = _this$parseData_table.newData;\n\n      this.setState({\n        columns: newColumns,\n        data: newData\n      });\n      this.addAllDataToDb();\n    };\n\n    this.addAllDataToDb = () => {\n      var temp = this;\n      this.state.data.forEach(function (data) {\n        temp.addDataToDb(data);\n      });\n    };\n\n    this.addDataToDb = data => {\n      var s = true;\n      fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          //response.status ==400\n          window.alert('Something went wrong in the database: ' + response.status);\n          s = false; //return 0;\n        }\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n      console.log(\"s att the end = \" + s);\n      return s;\n    };\n\n    this.updateDataInDb = data => {\n      fetch(new Request('/db/updateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).then(function (response) {}).catch(error => console.error);\n    };\n\n    this.deleteDataFromDb = data => {\n      fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.setSelectedCategoryData = category => {\n      var newData = [];\n      this.state.data.forEach(function (data) {\n        newData.push(data[category]);\n      });\n      newData.sort(this.compare);\n      this.props.setChartData({\n        column: category.toUpperCase(),\n        data: newData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        className: \"Section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"contained-button-file\",\n        type: \"file\",\n        accept: \".csv\",\n        onChange: this.parseCsv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"uploadBtn\",\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Upload CSV File\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          toolbarButtonAlignment: 'left',\n          headerStyle: style,\n          addRowPosition: 'first'\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        search: true,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                success = this.addDataToDb(newData);\n                console.log(\"s = \" + success);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.updateDataInDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.deleteFromDb(oldData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        localization: {\n          header: {\n            actions: ''\n          },\n          body: {\n            emptyDataSourceMessage: 'No Data to Display'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(Dialog, {\n        columns: this.state.columns,\n        setSelectedCategoryData: this.setSelectedCategoryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false\n    };\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nconst style = {\n  padding: '0px'\n};\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","Papa","Button","MaterialTable","default","Dialog","Table","constructor","props","parseCsv","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","style","data","newData","key","hasOwnProperty","newColumns","setState","columns","addAllDataToDb","temp","state","addDataToDb","s","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","then","response","ok","window","alert","status","catch","error","message","console","log","updateDataInDb","deleteDataFromDb","setSelectedCategoryData","category","sort","compare","setChartData","column","render","showTitle","toolbarButtonAlignment","headerStyle","addRowPosition","isLoading","onRowAdd","Promise","resolve","reject","setTimeout","success","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","deleteFromDb","actions","emptyDataSourceMessage","a","b","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Papa from 'papaparse';\n\nimport Button from '@material-ui/core/Button';\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n    };\n  }\n\n  parseCsv = (event) => {\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateTable\n    });\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: style\n      });\n    });\n    (parsedColumns[0])['editable']='onAdd';\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key]\n        }\n      }\n      parsedData.push(newData);\n    });\n\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n  }\n\n  updateTable = (result) => {\n    const{ newColumns, newData } = this.parseData_table(result);\n    this.setState({\n      columns: newColumns,\n      data: newData\n    });\n    this.addAllDataToDb();\n  }\n\n  addAllDataToDb = () => {\n    var temp = this;\n    this.state.data.forEach(function(data) {\n      temp.addDataToDb(data);\n    });\n  }\n\n  addDataToDb = (data) => {\n    var s = true;\n    fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){ //response.status ==400\n        window.alert('Something went wrong in the database: ' + response.status);\n            s=false;\n          //return 0;\n        }\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    console.log(\"s att the end = \" +  s);\n    return s;\n  }\n\n\n  updateDataInDb = (data) => {\n\n    fetch(new Request('/db/updateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .then(function(response) {\n})\n      .catch(error => console.error)\n  }\n\n  deleteDataFromDb = (data) => {\n    fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .catch(error => console.error)\n  }\n\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setChartData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n  render = () => {\n      return (\n        <div>\n          <h1>DB chart generator</h1>\n          <div className = 'Section'>\n            <input\n              id=\"contained-button-file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange = {this.parseCsv}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button id = 'uploadBtn' variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload CSV File\n              </Button>\n            </label>\n\n            <h2>Database Table</h2>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  toolbarButtonAlignment: 'left',\n                  headerStyle: style,\n                  addRowPosition:'first'\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data=  {this.state.data}\n              search = {true}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                         {\n                             const data = this.state.data;\n                             data.push(newData);\n                             success = this.addDataToDb(newData);\n                             console.log(\"s = \" + success);\n                             this.setState({ data }, () => resolve());\n                         }\n                         resolve();\n                     }, 1000);\n                 }),\n               onRowUpdate: (newData, oldData) =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       const data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data[index] = newData;\n                       this.updateDataInDb(newData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               onRowDelete: oldData =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       let data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data.splice(index, 1);\n                       this.deleteFromDb(oldData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               }}\n               localization={{\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No Data to Display',\n                    }\n                }}\n             />\n            <Dialog columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData}/>\n          </div>\n        </div>\n      );\n    }\n}\n\nconst style = { padding:'0px' }\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}