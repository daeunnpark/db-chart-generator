{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nrequire('highcharts/modules/no-data-to-display.js')(Highcharts);\n\nclass Chart extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.countFrequency = arr => {\n      var counts = {};\n\n      for (var i = 0; i < arr.length; i++) {\n        var data = arr[i];\n        counts[data] = counts[data] ? counts[data] + 1 : 1;\n      }\n\n      return counts;\n    };\n\n    this.parseData = props => {\n      var counts = this.countFrequency(props.data);\n      return {\n        newColumn: props.column,\n        newCategories: Object.keys(counts),\n        newBarChartData: Object.values(counts),\n        newPieChartData: this.parseData_helper(counts)\n      };\n    };\n\n    this.parseData_helper = counts => {\n      var arr = [];\n      Object.keys(counts).forEach(function (key) {\n        let dataObject = {};\n        dataObject = {\n          name: key,\n          y: counts[key]\n        };\n        arr.push(dataObject);\n      });\n      return arr;\n    };\n\n    this.setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n      this.setState({\n        barChart: {\n          title: {\n            text: newColumn\n          },\n          subtitle: {\n            text: source\n          },\n          xAxis: {\n            visible: true,\n            categories: newCategories\n          },\n          yAxis: {\n            visible: true\n          },\n          series: [{\n            name: newColumn,\n            data: newBarChartData\n          }]\n        },\n        pieChart: {\n          title: {\n            text: newColumn\n          },\n          subtitle: {\n            text: source\n          },\n          series: [{\n            name: newColumn,\n            data: newPieChartData\n          }]\n        }\n      });\n    };\n\n    this.state = {\n      barChart: defaultOptions_bar,\n      pieChart: defaultOptions_pie\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const _this$parseData = this.parseData(this.props),\n            newColumn = _this$parseData.newColumn,\n            newCategories = _this$parseData.newCategories,\n            newBarChartData = _this$parseData.newBarChartData,\n            newPieChartData = _this$parseData.newPieChartData;\n\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Charts\"), React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.pieChart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst defaultOptions_bar = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Bar Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  xAxis: {\n    visible: false,\n    categories: []\n  },\n  yAxis: {\n    visible: false,\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'count(person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    showInLegend: false,\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n    noData: \"No Data to Display\"\n  },\n  noData: {\n    style: {\n      fontWeight: 'bold',\n      fontSize: '15px',\n      color: '#303030'\n    }\n  }\n};\nconst defaultOptions_pie = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Pie Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n    noData: \"No Data to Display\"\n  },\n  noData: {\n    style: {\n      fontWeight: 'bold',\n      fontSize: '15px',\n      color: '#303030'\n    }\n  }\n};\nconst source = 'Source: kaggle';\nexport default Chart;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","countFrequency","arr","counts","i","length","data","parseData","newColumn","column","newCategories","Object","keys","newBarChartData","values","newPieChartData","parseData_helper","forEach","key","dataObject","name","y","push","setChartData","setState","barChart","title","text","subtitle","source","xAxis","visible","categories","yAxis","series","pieChart","state","defaultOptions_bar","defaultOptions_pie","componentDidUpdate","prevProps","render","chart","type","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","pointPadding","borderWidth","groupPadding","shadow","showInLegend","colorByPoint","lang","noData","style","fontWeight","fontSize","color","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\nrequire('highcharts/modules/no-data-to-display.js')(Highcharts);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChart: defaultOptions_bar,\n      pieChart: defaultOptions_pie\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const {\n        newColumn,\n        newCategories,\n        newBarChartData,\n        newPieChartData\n      } = this.parseData(this.props);\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  countFrequency = (arr) => {\n    var counts = {};\n    for (var i = 0; i < arr.length; i++) {\n      var data = arr[i];\n      counts[data] = counts[data] ? counts[data] + 1 : 1;\n    }\n    return counts;\n  }\n\n  parseData = (props) => {\n    var counts = this.countFrequency(props.data);\n    return {\n      newColumn: props.column,\n      newCategories: Object.keys(counts),\n      newBarChartData: Object.values(counts),\n      newPieChartData: this.parseData_helper(counts)\n    };\n  }\n\n  parseData_helper = (counts) => {\n    var arr = [];\n    Object.keys(counts).forEach(function(key) {\n      let dataObject = {};\n      dataObject = {\n        name: key,\n        y: counts[key]\n      }\n      arr.push(dataObject);\n    });\n    return arr;\n  }\n\n\n  setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n\n    this.setState({\n      barChart: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: source\n        },\n        xAxis: {\n          visible:true,\n          categories: newCategories\n        },\n        yAxis: {\n          visible:true,\n        },\n        series: [{\n          name : newColumn,\n          data: newBarChartData\n        }]\n      },\n\n      pieChart: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: source\n        },\n        series: [{\n          name: newColumn,\n          data: newPieChartData\n        }]\n      }\n    });\n  }\n\n\n\n\n\n  render(){\n    return(\n      <div>\n        <h3>Charts</h3>\n        <div className = 'chartContainer'>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.barChart}\n        />\n        </div>\n        <div className = 'chartContainer'>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.pieChart}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst defaultOptions_bar = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Bar Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  xAxis: {\n    visible:false,\n    categories: []\n  },\n  yAxis: {\n    visible:false,\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'count(person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    showInLegend: false,\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n  noData: {\n      style: {\n          fontWeight: 'bold',\n          fontSize: '15px',\n          color: '#303030'\n      }\n  }\n}\n\nconst defaultOptions_pie = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Pie Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n  noData: {\n      style: {\n          fontWeight: 'bold',\n          fontSize: '15px',\n          color: '#303030'\n      }\n  }\n}\n\nconst source = 'Source: kaggle';\n\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}