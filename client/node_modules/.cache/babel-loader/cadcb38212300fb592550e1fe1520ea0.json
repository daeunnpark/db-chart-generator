{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/client/src/components/table/Table.js\";\nimport React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport Button from '@material-ui/core/Button';\nimport { TablePagination } from '@material-ui/core';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport SelectCategoryModal from '../dialog/SelectCategoryModal';\nimport DbUpdateAlert from '../dialog/DbUpdateAlert';\nimport SearchBar from './SearchBar';\nimport * as styles from '../../constants/styles';\nconst toolbar_style = styles.TOOLBAR;\nconst table_style = styles.TABLE;\nconst container_style = styles.SEARCHBAR_CONTAINER;\nconst section_style = styles.SECTION;\nconst input_style = styles.INPUT;\n/*\n Represents database\n*/\n\nclass Table extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.parseCsv = event => {\n      if (event.target.files[0] !== 0) {\n        Papa.parse(event.target.files[0], {\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          complete: this.updateTable\n        });\n      }\n    };\n\n    this.parseData_table = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: table_style\n        });\n      });\n      parsedColumns[0]['editable'] = 'onAdd';\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData_table = this.parseData_table(result),\n            newColumns = _this$parseData_table.newColumns,\n            newData = _this$parseData_table.newData;\n\n      this.setState({\n        isLoading: true\n      });\n      this.addAllDataToDb(newData).then(success => {\n        if (success) {\n          this.setState({\n            columns: newColumns,\n            data: newData,\n            dataCopy: [...newData],\n            isLoaded: true\n          });\n          this.setAlert(true);\n        } else {\n          this.setAlert(false);\n        }\n\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.addAllDataToDb = data => {\n      return fetch(new Request('/db/addAll', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.addDataToDb = data => {\n      return fetch(new Request('/db/add', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.updateDataInDb = data => {\n      return fetch(new Request('/db/update', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.deleteDataFromDb = data => {\n      return fetch(new Request('/db/delete', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        if (!response.ok) {\n          return false;\n        }\n\n        return true;\n      }).catch(function (error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n    };\n\n    this.setSelectedCategoryData = category => {\n      var newData = [];\n      this.state.data.forEach(function (data) {\n        newData.push(data[category]);\n      });\n      newData.sort(this.compare);\n      this.props.setChartData({\n        column: category.toUpperCase(),\n        data: newData\n      });\n    };\n\n    this.setAlert = bool => {\n      this.setState({\n        success: bool\n      });\n      this.setState({\n        success: null\n      });\n    };\n\n    this.setSearchResult = (newKeyword, newData) => {\n      this.setState({\n        keyword: newKeyword,\n        data: newData\n      });\n\n      this._pagination.current.handleFirstPageButtonClick();\n    };\n\n    this.resetSearchResult = () => {\n      this.setState({\n        data: [...this.state.dataCopy],\n        keyword: ''\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        style: section_style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"contained-button-file\",\n        type: \"file\",\n        accept: \".csv\",\n        onChange: this.parseCsv,\n        style: input_style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"uploadBtn\",\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Upload CSV File\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          search: false,\n          toolbarButtonAlignment: 'left',\n          headerStyle: table_style,\n          addRowPosition: 'first',\n          emptyRowsWhenPaging: false\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.addDataToDb(newData).then(success => {\n                if (success) {\n                  const ndata = this.state.data;\n                  ndata.push(newData);\n                  const ndataCopy = this.state.dataCopy;\n                  ndataCopy.push(newData);\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.updateDataInDb(newData).then(success => {\n                if (success) {\n                  const ndata = this.state.data;\n                  const index = ndata.indexOf(oldData);\n                  ndata[index] = newData;\n                  const ndataCopy = this.state.dataCopy;\n                  var index_copy = ndataCopy.findIndex(a => a.passengerid === oldData[\"passengerid\"]);\n                  ndataCopy[index_copy] = newData;\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              this.deleteDataFromDb(oldData).then(success => {\n                if (success) {\n                  let ndata = this.state.data;\n                  const index = ndata.indexOf(oldData);\n                  ndata.splice(index, 1);\n                  let ndataCopy = this.state.dataCopy;\n                  var index_copy = ndataCopy.findIndex(a => a.passengerid === oldData[\"passengerid\"]);\n                  ndataCopy.splice(index_copy, 1);\n                  this.setState({\n                    data: ndata,\n                    dataCopy: ndataCopy\n                  }, () => resolve());\n                  this.setAlert(true);\n                } else {\n                  reject();\n                  this.setAlert(false);\n                }\n              });\n            }, 1000);\n          })\n        },\n        components: {\n          Pagination: props => React.createElement(TablePagination, Object.assign({}, props, {\n            ref: this._pagination,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 341\n            },\n            __self: this\n          })),\n          Toolbar: props => React.createElement(\"div\", {\n            style: toolbar_style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 343\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 344\n            },\n            __self: this\n          }, React.createElement(MTableToolbar, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345\n            },\n            __self: this\n          }))), React.createElement(\"div\", {\n            style: container_style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 347\n            },\n            __self: this\n          }, React.createElement(SearchBar, {\n            keyword: this.state.keyword,\n            setSearchResult: this.setSearchResult.bind(this),\n            resetSearchResult: this.resetSearchResult.bind(this),\n            disabled: !this.state.isLoaded,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 348\n            },\n            __self: this\n          })))\n        },\n        localization: {\n          header: {\n            actions: ''\n          },\n          body: {\n            emptyDataSourceMessage: 'No Data to Display'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(SelectCategoryModal, {\n        columns: this.state.columns,\n        setSelectedCategoryData: this.setSelectedCategoryData,\n        disabled: !this.state.isLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      })), React.createElement(DbUpdateAlert, {\n        success: this.state.success,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      isLoaded: false,\n      success: null,\n      dataCopy: [],\n      keyword: ''\n    };\n    this._pagination = React.createRef();\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/client/src/components/table/Table.js"],"names":["React","Component","Papa","Button","TablePagination","MaterialTable","MTableToolbar","SelectCategoryModal","DbUpdateAlert","SearchBar","styles","toolbar_style","TOOLBAR","table_style","TABLE","container_style","SEARCHBAR_CONTAINER","section_style","SECTION","input_style","INPUT","Table","constructor","props","parseCsv","event","target","files","parse","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","data","newData","key","hasOwnProperty","newColumns","setState","isLoading","addAllDataToDb","then","success","columns","dataCopy","isLoaded","setAlert","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","response","ok","catch","error","window","alert","message","addDataToDb","updateDataInDb","deleteDataFromDb","setSelectedCategoryData","category","state","sort","compare","setChartData","column","bool","setSearchResult","newKeyword","keyword","_pagination","current","handleFirstPageButtonClick","resetSearchResult","render","showTitle","search","toolbarButtonAlignment","headerStyle","addRowPosition","emptyRowsWhenPaging","onRowAdd","Promise","resolve","reject","setTimeout","ndata","ndataCopy","onRowUpdate","oldData","index","indexOf","index_copy","findIndex","a","passengerid","onRowDelete","splice","Pagination","Toolbar","bind","actions","emptyDataSourceMessage","createRef","b"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport Button from '@material-ui/core/Button';\nimport { TablePagination } from '@material-ui/core';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport SelectCategoryModal from '../dialog/SelectCategoryModal';\nimport DbUpdateAlert from '../dialog/DbUpdateAlert';\nimport SearchBar from './SearchBar';\nimport * as styles from '../../constants/styles';\n\nconst toolbar_style = styles.TOOLBAR;\nconst table_style = styles.TABLE;\nconst container_style = styles.SEARCHBAR_CONTAINER;\nconst section_style = styles.SECTION;\nconst input_style = styles.INPUT;\n\n/*\n Represents database\n*/\nclass Table extends Component {s\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n      isLoaded: false,\n      success:null,\n      dataCopy:[],\n      keyword:'',\n    };\n    this._pagination = React.createRef();\n  }\n\n  parseCsv = (event) => {\n    if(event.target.files[0]!==0){\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    }\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: table_style,\n      });\n    });\n    (parsedColumns[0])['editable']='onAdd';\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key];\n        }\n      }\n      parsedData.push(newData);\n    });\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n  }\n\n  updateTable = (result) => {\n\n    const{ newColumns, newData } = this.parseData_table(result);\n\n    this.setState({\n      isLoading: true\n    });\n\n    this.addAllDataToDb(newData).then(success => {\n      if(success){\n        this.setState({\n          columns: newColumns,\n          data: newData,\n          dataCopy: [...newData],\n          isLoaded: true\n        });\n        this.setAlert(true);\n       } else {\n         this.setAlert(false);\n       }\n       this.setState({\n        isLoading: false,\n       });\n\n    });\n}\n\n  addAllDataToDb = (data) => {\n    return fetch(new Request('/db/addAll', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  addDataToDb = (data) => {\n    return fetch(new Request('/db/add', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  updateDataInDb = (data) => {\n    return fetch(new Request('/db/update', {\n        method: 'PUT',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  deleteDataFromDb = (data) => {\n    return fetch(new Request('/db/delete', {\n        method: 'DELETE',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n        if(!response.ok){\n          return false;\n        }\n          return true;\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setChartData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n  setAlert = (bool) => {\n    this.setState({\n      success: bool\n    });\n    this.setState({\n      success: null\n    });\n  }\n\n  setSearchResult = (newKeyword, newData) => {\n    this.setState({\n      keyword: newKeyword,\n      data: newData,\n    });\n    this._pagination.current.handleFirstPageButtonClick();\n  }\n\n  resetSearchResult  = () => {\n    this.setState({\n      data : [...this.state.dataCopy],\n      keyword : ''\n    });\n  }\n\n  render = () => {\n      return (\n        <div>\n          <h1>DB chart generator</h1>\n          <div style = {section_style}>\n            <input\n              id=\"contained-button-file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange = {this.parseCsv}\n              style = {input_style}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button id = 'uploadBtn' variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload CSV File\n              </Button>\n            </label>\n\n            <h2>Database Table</h2>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  search : false,\n                  toolbarButtonAlignment: 'left',\n                  headerStyle: table_style,\n                  addRowPosition:'first',\n                  emptyRowsWhenPaging: false\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data= {this.state.data}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                            this.addDataToDb(newData).then(success => {\n                               if(success){\n                                  const ndata = this.state.data;\n                                  ndata.push(newData);\n\n                                  const ndataCopy = this.state.dataCopy;\n                                  ndataCopy.push(newData);\n\n                                  this.setState({ data:ndata, dataCopy: ndataCopy}, () => resolve());\n                                  this.setAlert(true);\n\n                                } else{\n                                  reject();\n                                  this.setAlert(false);\n                                }\n                            });\n                     }, 1000);\n                 }),\n                 onRowUpdate: (newData, oldData) =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                         this.updateDataInDb(newData).then(success => {\n                            if(success){\n                              const ndata = this.state.data;\n                              const index = ndata.indexOf(oldData);\n                              ndata[index] = newData;\n\n                              const ndataCopy = this.state.dataCopy;\n                              var index_copy = ndataCopy.findIndex(a=> a.passengerid === oldData[\"passengerid\"]);\n                              ndataCopy[index_copy] = newData;\n\n                              this.setState({ data:ndata, dataCopy: ndataCopy}, () => resolve());\n                              this.setAlert(true);\n                             } else{\n                               reject();\n                               this.setAlert(false);\n                             }\n                         });\n                     }, 1000)\n                   }),\n                   onRowDelete: oldData =>\n                     new Promise((resolve, reject) => {\n                       setTimeout(() => {\n                           this.deleteDataFromDb(oldData).then(success => {\n                                if(success){\n                                let ndata = this.state.data;\n                                const index = ndata.indexOf(oldData);\n                                ndata.splice(index, 1);\n\n                                let ndataCopy = this.state.dataCopy;\n                                var index_copy = ndataCopy.findIndex(a=> a.passengerid === oldData[\"passengerid\"]);\n                                ndataCopy.splice(index_copy,1);\n\n                                this.setState({ data:ndata, dataCopy: ndataCopy}, () => resolve());\n                                this.setAlert(true);\n                               } else{\n                                 reject();\n                                this.setAlert(false);\n                               }\n                           });\n                       }, 1000)\n                     }),\n              }}\n              components={{\n                Pagination: props =>(<TablePagination {...props} ref = {this._pagination}/>),\n                Toolbar: props => (\n                 <div style={toolbar_style}>\n                     <div>\n                       <MTableToolbar {...props} />\n                     </div>\n                     <div style = {container_style}>\n                       <SearchBar\n                         keyword = {this.state.keyword}\n                         setSearchResult = {this.setSearchResult.bind(this)}\n                         resetSearchResult = {this.resetSearchResult.bind(this)}\n                         disabled = {!this.state.isLoaded} />\n                     </div>\n                 </div>\n                ),\n              }}\n               localization={{\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No Data to Display',\n                    }\n                }}\n\n             />\n            <SelectCategoryModal columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData} disabled = {!this.state.isLoaded}/>\n          </div>\n          <DbUpdateAlert success= {this.state.success}/>\n        </div>\n      );\n    }\n}\n\n\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}