{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport Papa from 'papaparse'; // default param in const?\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); // Default\n\n    this.setData = newState => {\n      this.props.setData({\n        columns: [this.state.columns[1].title, this.state.columns[2].title, this.state.columns[3].title],\n        data: [this.state.data[0], this.state.data[1]]\n      });\n      this.setState(newState);\n    };\n\n    this.setData2 = Data => {\n      console.log(Data);\n      /*\n      this.setState({\n        columns: [\n              this.state.columns[1].title,\n              this.state.columns[2].title,\n              this.state.columns[3].title\n            ],\n        data: [\n          this.state.data[0],\n          this.state.data[1]\n        ]\n         });\n       this.setState(newState);\n      */\n    };\n\n    this.uploadCsvFile = event => {\n      event.preventDefault();\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.updateTable = result => {\n      console.log(result.meta.fields); //console.log(result.data);\n      //console.log(Object.keys(result.data[0][0]));\n\n      var NewColumns = [];\n      var NewData = [];\n      result.meta.fields.forEach(function (field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase()\n        });\n      });\n      result.data.forEach(function (data) {\n        // console.log(data);\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            //console.log(key.toLowerCase() + \" -> \" + data[key]);\n            NewData.push({\n              [key]: data[key]\n            });\n          }\n        }\n      });\n      console.log(NewData);\n      /*\n      this.state.setState({\n        columns: NewColumns,\n        data: NewData\n      })*/\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Upload File\", React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        style: {\n          display: \"none\"\n        },\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })), React.createElement(MaterialTable, {\n        title: \"Editable Preview\",\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'COL2',\n        field: 'col2'\n      }, {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      }, {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      }],\n      data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      }, {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      }]\n    };\n  }\n\n  componentDidMount() {} //console.log(\"DID MOUNTTT\");\n  //this.setData(this.state);\n  // Table To APP\n\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","Button","Papa","Table","constructor","props","setData","newState","columns","state","title","data","setState","setData2","Data","console","log","uploadCsvFile","event","preventDefault","parse","target","files","header","skipEmptyLines","complete","updateTable","result","meta","fields","NewColumns","NewData","forEach","field","push","toUpperCase","toLowerCase","key","hasOwnProperty","render","display","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","type","id","col2","col3","col4","componentDidMount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\n\nimport Papa from 'papaparse';\n\n// default param in const?\nclass Table extends Component {\n\n    constructor(props) {\n      super(props);\n      // Default\n      this.state = {\n        columns : [\n          { title: 'ID', field: 'id' },\n          { title: 'COL2', field: 'col2'},\n          { title: 'COL3', field: 'col3', type: 'numeric' },\n          { title: 'COL4', field: 'col4', type: 'numeric' },\n        ],\n\n        data: [\n          { id: \"A\", col2: 80, col3: 30, col4: 40 },\n          { id: \"B\", col2: 30, col3: 20, col4: 10 },\n        ]\n      };\n    }\n\n    componentDidMount(){\n      //console.log(\"DID MOUNTTT\");\n      //this.setData(this.state);\n    }\n\n\n    // Table To APP\n    setData = (newState) => {\n      this.props.setData({\n        columns: [\n              this.state.columns[1].title,\n              this.state.columns[2].title,\n              this.state.columns[3].title\n            ],\n        data: [\n          this.state.data[0],\n          this.state.data[1]\n        ]\n\n        });\n\n      this.setState(newState);\n\n    }\n\n    // File loader to Table\n    setData2 = (Data) => {\n      console.log(Data);\n      /*\n      this.setState({\n        columns: [\n              this.state.columns[1].title,\n              this.state.columns[2].title,\n              this.state.columns[3].title\n            ],\n        data: [\n          this.state.data[0],\n          this.state.data[1]\n        ]\n\n        });\n\n      this.setState(newState);\n*/\n    }\n\n\n    uploadCsvFile = (event) => {\n      event.preventDefault();\n\n\n      Papa.parse(event.target.files[0], {\n            header: true,\n            skipEmptyLines: true,\n            complete: this.updateTable\n          });\n        }\n\n\n    updateTable = (result) => {\n      console.log(result.meta.fields);\n      //console.log(result.data);\n\n      //console.log(Object.keys(result.data[0][0]));\n\n      var NewColumns = [];\n      var NewData = [];\n\n      result.meta.fields.forEach(function (field) {\n\n          NewColumns.push({\n              title: field.toUpperCase(),\n              field: field.toLowerCase()\n            });\n      });\n\n\n\n\n      result.data.forEach(function (data) {\n\n      // console.log(data);\n\n           for (var key in data) {\n             if (data.hasOwnProperty(key)) {\n                 //console.log(key.toLowerCase() + \" -> \" + data[key]);\n\n                 NewData.push({\n\n                  [key] : data[key]\n                 });\n\n             }\n          }\n\n         });\n\n         console.log(NewData);\n         /*\n         this.state.setState({\n           columns: NewColumns,\n           data: NewData\n         })*/\n\n    }\n\n\n  render = () => {\n  return (\n    <div>\n    <Button\n    variant=\"contained\"\n    component=\"label\">\n    Upload File\n    <input\n      type=\"file\"\n      accept=\".csv\"\n      style={{ display: \"none\" }}\n      onChange = {this.uploadCsvFile}\n    />\n  </Button>\n    <MaterialTable\n       title=\"Editable Preview\"\n       columns={this.state.columns}\n       data={this.state.data}\n       editable={{\n         onRowAdd: newData =>\n           new Promise((resolve, reject) => {\n             setTimeout(() => {\n               {\n                 const data = this.state.data;\n                 data.push(newData);\n                 this.setState({ data }, () => resolve());\n               }\n               resolve()\n             }, 1000)\n           }),\n         onRowUpdate: (newData, oldData) =>\n           new Promise((resolve, reject) => {\n             setTimeout(() => {\n               {\n                 const data = this.state.data;\n                 const index = data.indexOf(oldData);\n                 data[index] = newData;\n                 this.setState({ data }, () => resolve());\n               }\n               resolve()\n             }, 1000)\n           }),\n         onRowDelete: oldData =>\n           new Promise((resolve, reject) => {\n             setTimeout(() => {\n               {\n                 let data = this.state.data;\n                 const index = data.indexOf(oldData);\n                 data.splice(index, 1);\n                 this.setState({ data }, () => resolve());\n               }\n               resolve()\n             }, 1000)\n           }),\n       }}\n     />\n </div>\n  );\n}\n}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}