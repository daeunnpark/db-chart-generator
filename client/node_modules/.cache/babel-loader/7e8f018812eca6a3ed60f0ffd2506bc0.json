{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'; // Load Highcharts modules\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Monthly Average Rainfall'\n  },\n  subtitle: {\n    text: 'Source: WorldClimate.com'\n  },\n  xAxis: {\n    categories: [1, 2],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Rainfall (mm)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: [42, 55]\n  }]\n};\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Browser market shares in January, 2018'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: [{\n      name: '0',\n      y: 65,\n      sliced: true,\n      selected: true\n    }, {\n      name: '1',\n      y: 11.84\n    }]\n  }]\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.parseData = arr => {\n      var counts = {};\n      var NewColumns = [];\n      var NewBarData = [];\n      var NewPieData = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        var num = arr[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n      }\n\n      NewColumns = Object.keys(counts);\n      NewBarData = Object.values(counts);\n      Object.keys(counts).forEach(function (key) {\n        let newObject = {};\n        newObject = {\n          name: key,\n          y: counts[key]\n        };\n        NewPieData.push(newObject);\n      });\n      /*\n        let newObject2 = {};\n        newObject2 = {\n          data: Object.values(counts)\n        }*/\n\n      console.log(NewBarData); //return counts;\n\n      return {\n        columns: NewColumns,\n        barData: NewBarData,\n        pieData: NewPieData\n      };\n    };\n\n    this.setChartData = (newCategories, newChartData_bar, newChartData_pie) => {\n      this.setState({\n        barChartSettings: {\n          xAxis: {\n            categories: newCategories\n          },\n          series: newChartData_bar\n        },\n        pieChartSettings: {\n          series: {\n            data: newChartData_pie\n          }\n        }\n      });\n    };\n\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps !== this.props) {\n      const _this$parseData = this.parseData(this.props.data),\n            columns = _this$parseData.columns,\n            barData = _this$parseData.barData,\n            pieData = _this$parseData.pieData;\n\n      console.log(bar_cate);\n      console.log(bar_cate.length);\n      console.log(bar_data);\n      console.log(pie_data);\n      this.setState({\n        barChartSettings: {\n          xAxis: {\n            categories: bar_cate\n          },\n          series: [{\n            name: 'Data',\n            data: bar_data\n          }]\n        },\n        pieChartSettings: {\n          series: [{\n            data: pie_data\n          }]\n        }\n      });\n      /*\n            var newCategories = this.props.columns.slice(1);\n             var newChartData_bar = this.chartDataParser_bar(this.props.data);\n            var newChartData_pie = this.chartDataParser_pie(newCategories, this.props.data);\n             this.(newCategories, newChartData_bar, newChartData_pie);\n      */\n    }\n\n    if (prevState !== this.state) {\n      console.log(\"State diff\");\n      console.log(prevState);\n      console.log(this.state);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Charts\"), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.pieChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","bar_options","chart","type","title","text","subtitle","xAxis","categories","crosshair","yAxis","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","groupPadding","shadow","series","name","data","pie_options","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format","colorByPoint","y","sliced","selected","Chart","constructor","props","parseData","arr","counts","NewColumns","NewBarData","NewPieData","i","length","num","Object","keys","values","forEach","key","newObject","push","console","log","columns","barData","pieData","setChartData","newCategories","newChartData_bar","newChartData_pie","setState","barChartSettings","pieChartSettings","state","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","bar_cate","bar_data","pie_data","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n// Load Highcharts modules\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Monthly Average Rainfall'\n  },\n  subtitle: {\n    text: 'Source: WorldClimate.com'\n  },\n  xAxis: {\n    categories: [\n      1,\n      2,\n    ],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Rainfall (mm)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: [42, 55]\n\n  }]\n}\n\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Browser market shares in January, 2018'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: [{\n      name: '0',\n      y: 65,\n      sliced: true,\n      selected: true\n    }, {\n      name: '1',\n      y: 11.84\n    }]\n  }]\n}\n\n\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  parseData = (arr) => {\n\n    var counts = {};\n    var NewColumns = [];\n    var NewBarData = [];\n    var NewPieData = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      var num = arr[i];\n      counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n\n    NewColumns = Object.keys(counts);\n    NewBarData = Object.values(counts);\n\n\n    Object.keys(counts).forEach(function(key) {\n      let newObject = {};\n      newObject = {\n        name: key,\n        y: counts[key]\n      }\n      NewPieData.push(newObject);\n    });\n\n\n  /*\n    let newObject2 = {};\n    newObject2 = {\n      data: Object.values(counts)\n    }*/\n\n\n    console.log(NewBarData);\n\n    //return counts;\n    return {\n      columns: NewColumns,\n      barData: NewBarData,\n      pieData: NewPieData\n    };\n\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    if (prevProps !== this.props) {\n      const {\n        columns,\n        barData,\n        pieData\n      } = this.parseData(this.props.data);\n\n      console.log(bar_cate);\n      console.log(bar_cate.length);\n      console.log(bar_data);\n      console.log(pie_data);\n\n      this.setState({\n        barChartSettings: {\n          xAxis: {\n            categories: bar_cate\n          },\n          series: [{\n            name: 'Data',\n            data: bar_data\n\n          }]\n        },\n\n        pieChartSettings: {\n          series: [{\n            data: pie_data\n          }]\n        }\n      });\n\n      /*\n            var newCategories = this.props.columns.slice(1);\n\n            var newChartData_bar = this.chartDataParser_bar(this.props.data);\n            var newChartData_pie = this.chartDataParser_pie(newCategories, this.props.data);\n\n            this.(newCategories, newChartData_bar, newChartData_pie);\n      */\n    }\n\n    if (prevState !== this.state) {\n      console.log(\"State diff\");\n      console.log(prevState);\n      console.log(this.state);\n    }\n\n  }\n\n\n\n\n\n  setChartData = (newCategories, newChartData_bar, newChartData_pie) => {\n\n    this.setState({\n      barChartSettings: {\n        xAxis: {\n          categories: newCategories\n        },\n        series: newChartData_bar\n      },\n\n      pieChartSettings: {\n        series: {\n          data: newChartData_pie\n        }\n      }\n    });\n\n  }\n\n  render(){\n    return(\n      <div>\n      <h3>Charts</h3>\n\n\n      <HighchartsReact\n        highcharts={Highcharts}\n        options = {this.state.barChartSettings}\n      />\n      <HighchartsReact\n        highcharts={Highcharts}\n        options = {this.state.pieChartSettings}\n      />\n\n      </div>\n\n    );\n\n}\n}\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}