{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport Papa from 'papaparse'; // default param in const?\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); // Default\n\n    this.saveToDb = () => {\n      event.preventDefault();\n      var request = this.state.request.trim();\n\n      if (!request) {\n        return;\n      }\n\n      fetch(\"/demo/add?PassengerId=1&Survived=0\").then(response => {\n        return response.text();\n      }).then(body => {\n        alert(body);\n      });\n    };\n\n    this.setData = () => {\n      console.log(\"SETDATA From TABLE\");\n      var NewColumns = [];\n      var NewData = [];\n      this.state.columns.forEach(function (column) {\n        NewColumns.push(column.title);\n      });\n      NewData = this.state.data;\n      this.props.setData({\n        columns: NewColumns,\n        data: NewData\n      });\n    };\n\n    this.uploadCsvFile = event => {\n      event.preventDefault();\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.updateTable = result => {\n      var NewColumns = [];\n      var NewData = [];\n      result.meta.fields.forEach(function (field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase()\n        });\n      });\n      result.data.forEach(function (data) {\n        let newObject = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newObject[key.toLowerCase()] = data[key];\n          }\n        }\n\n        NewData.push(newObject);\n      });\n      this.setState({\n        columns: NewColumns,\n        data: NewData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Upload File\", React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        style: {\n          display: \"none\"\n        },\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(MaterialTable, {\n        title: \"Table\",\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.saveToDb,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Save to DB\"), React.createElement(\"button\", {\n        onClick: this.setData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"UpdateChart\"));\n    };\n\n    this.state = {\n      columns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'COL2',\n        field: 'col2',\n        type: 'numeric'\n      }, {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      }, {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      }],\n      data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      }, {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      }]\n    };\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","Button","Papa","Table","constructor","props","saveToDb","event","preventDefault","request","state","trim","fetch","then","response","text","body","alert","setData","console","log","NewColumns","NewData","columns","forEach","column","push","title","data","uploadCsvFile","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","result","meta","fields","field","toUpperCase","toLowerCase","newObject","key","hasOwnProperty","setState","render","display","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","type","id","col2","col3","col4"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\n\nimport Papa from 'papaparse';\n\n// default param in const?\nclass Table extends Component {\nconstructor(props) {\n  super(props);\n  // Default\n  this.state = {\n    columns: [{\n        title: 'ID',\n        field: 'id'\n      },\n      {\n        title: 'COL2',\n        field: 'col2',\n        type: 'numeric'\n      },\n      {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      },\n      {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      },\n    ],\n\n    data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      },\n      {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      },\n    ]\n  };\n}\n\n\n\nsaveToDb = () => {\n  event.preventDefault();\n\n  var request = this.state.request.trim();\n  if (!request) {\n    return;\n  }\n  fetch(`/demo/add?PassengerId=1&Survived=0`)\n      .then(response => {\n        return response.text();\n      })\n      .then(body => {\n        alert(body);\n      });\n\n\n}\n// Table To Parent APP\nsetData = () => {\n  console.log(\"SETDATA From TABLE\");\n\n  var NewColumns = [];\n  var NewData = [];\n\n  this.state.columns.forEach(function(column) {\n    NewColumns.push(\n      column.title\n    );\n  });\n\n  NewData = this.state.data;\n\n  this.props.setData({\n    columns: NewColumns,\n    data: NewData\n  });\n\n}\n\n\nuploadCsvFile = (event) => {\n  event.preventDefault();\n\n  Papa.parse(event.target.files[0], {\n    header: true,\n    skipEmptyLines: true,\n    dynamicTyping: true,\n    complete: this.updateTable\n  });\n}\n\n\nupdateTable = (result) => {\n\n  var NewColumns = [];\n  var NewData = [];\n\n  result.meta.fields.forEach(function(field) {\n    NewColumns.push({\n      title: field.toUpperCase(),\n      field: field.toLowerCase()\n    });\n  });\n\n  result.data.forEach(function(data) {\n    let newObject = {};\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        newObject[key.toLowerCase()] = data[key]\n      }\n    }\n    NewData.push(newObject);\n  });\n\n  this.setState({\n    columns: NewColumns,\n    data: NewData\n  });\n\n}\n\n\n    render = () => {\n        return (\n          <div>\n            <Button\n            variant=\"contained\"\n            component=\"label\">\n            Upload File\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              style={{ display: \"none\" }}\n              onChange = {this.uploadCsvFile}\n            />\n            </Button>\n\n            <MaterialTable\n               title=\"Table\"\n               columns={this.state.columns}\n               data={this.state.data}\n               editable={{\n                 onRowAdd: newData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         const data = this.state.data;\n                         data.push(newData);\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowUpdate: (newData, oldData) =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n\n                         const data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data[index] = newData;\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowDelete: oldData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         let data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data.splice(index, 1);\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n               }}\n             />\n           <button onClick = {this.saveToDb}>Save to DB</button>\n           <button onClick = {this.setData}>UpdateChart</button>\n        </div>\n        );\n        }\n}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}