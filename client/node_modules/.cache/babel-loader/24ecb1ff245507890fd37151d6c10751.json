{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'; // Load Highcharts modules\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Titanic data'\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  xAxis: {\n    categories: [1, 2],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Count (person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: [42, 55]\n  }]\n};\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Titanic data'\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: [{\n      name: '0',\n      y: 65,\n      sliced: true,\n      selected: true\n    }, {\n      name: '1',\n      y: 11.84\n    }]\n  }]\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.countFrequency = arr => {\n      var counts = {};\n\n      for (var i = 0; i < arr.length; i++) {\n        var data = arr[i];\n        counts[data] = counts[data] ? counts[data] + 1 : 1;\n      }\n\n      return counts;\n    };\n\n    this.parseData = arr => {\n      var counts = this.countFrequency(arr);\n      var columns = [];\n      var barChartData = [];\n      var pieChartData = [];\n      columns = Object.keys(counts);\n      barChartData = Object.values(counts);\n      Object.keys(counts).forEach(function (key) {\n        let dataObject = {};\n        dataObject = {\n          name: key,\n          y: counts[key]\n        };\n        pieChartData.push(dataObject);\n      });\n      return {\n        newColumns: columns,\n        newBarChartData: barChartData,\n        newPieChartData: pieChartData\n      };\n    };\n\n    this.setChartData = (newColumns, newBarChartData, newPieChartData) => {\n      this.setState({\n        barChartSettings: {\n          xAxis: {\n            categories: newColumns\n          },\n          series: [{\n            data: newBarChartData\n          }]\n        },\n        pieChartSettings: {\n          series: [{\n            data: newPieChartData\n          }]\n        }\n      });\n    };\n\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const _this$parseData = this.parseData(this.props.data),\n            newColumns = _this$parseData.newColumns,\n            newBarChartData = _this$parseData.newBarChartData,\n            newPieChartData = _this$parseData.newPieChartData;\n\n      this.setChartData(newColumns, newBarChartData, newPieChartData);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Charts\"), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.pieChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","bar_options","chart","type","title","text","subtitle","xAxis","categories","crosshair","yAxis","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","groupPadding","shadow","series","name","data","pie_options","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format","colorByPoint","y","sliced","selected","Chart","constructor","props","countFrequency","arr","counts","i","length","parseData","columns","barChartData","pieChartData","Object","keys","values","forEach","key","dataObject","push","newColumns","newBarChartData","newPieChartData","setChartData","setState","barChartSettings","pieChartSettings","state","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n// Load Highcharts modules\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Titanic data'\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  xAxis: {\n    categories: [\n      1,\n      2,\n    ],\n    crosshair: true\n  },\n  yAxis: {\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'Count (person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    name: 'Data',\n    data: [42, 55]\n\n  }]\n}\n\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Titanic data'\n  },\n  subtitle: {\n    text: 'Source: kaggle'\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    name: 'Brands',\n    colorByPoint: true,\n    data: [{\n      name: '0',\n      y: 65,\n      sliced: true,\n      selected: true\n    }, {\n      name: '1',\n      y: 11.84\n    }]\n  }]\n}\n\n\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n\n    if (prevProps !== this.props) {\n      const {\n        newColumns,\n        newBarChartData,\n        newPieChartData\n      } = this.parseData(this.props.data);\n\n      this.setChartData(newColumns, newBarChartData, newPieChartData);\n    }\n\n  }\n\n  countFrequency = (arr) => {\n    var counts = {};\n    for (var i = 0; i < arr.length; i++) {\n      var data = arr[i];\n      counts[data] = counts[data] ? counts[data] + 1 : 1;\n    }\n    return counts;\n  }\n\n  parseData = (arr) => {\n\n    var counts = this.countFrequency(arr);\n    var columns = [];\n    var barChartData = [];\n    var pieChartData = [];\n\n    columns = Object.keys(counts);\n    barChartData = Object.values(counts);\n\n    Object.keys(counts).forEach(function(key) {\n      let dataObject = {};\n      dataObject = {\n        name: key,\n        y: counts[key]\n      }\n      pieChartData.push(dataObject);\n    });\n\n    return {\n      newColumns: columns,\n      newBarChartData: barChartData,\n      newPieChartData: pieChartData\n    };\n\n  }\n\n  setChartData = (newColumns, newBarChartData, newPieChartData) => {\n\n    this.setState({\n      barChartSettings: {\n        xAxis: {\n          categories: newColumns\n        },\n        series: [{\n          data: newBarChartData\n        }]\n      },\n\n      pieChartSettings: {\n        series: [{\n          data: newPieChartData\n        }]\n      }\n    });\n\n  }\n\n\n\n\n\n\n\n\n  render(){\n    return(\n      <div>\n      <h3>Charts</h3>\n\n\n      <HighchartsReact\n        highcharts={Highcharts}\n        options = {this.state.barChartSettings}\n      />\n      <HighchartsReact\n        highcharts={Highcharts}\n        options = {this.state.pieChartSettings}\n      />\n\n      </div>\n\n    );\n\n}\n}\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}