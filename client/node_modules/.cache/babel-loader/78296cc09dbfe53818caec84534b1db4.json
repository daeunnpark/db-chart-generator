{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\nimport \"../App.css\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.search = () => {};\n\n    this.parseCSV = event => {\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.parseData = result => {\n      var parsedColumns = [];\n      var parsedData = [];\n      result.meta.fields.forEach(function (field) {\n        parsedColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase(),\n          cellStyle: style\n        });\n      });\n      result.data.forEach(function (data) {\n        let newData = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newData[key.toLowerCase()] = data[key];\n          }\n        }\n\n        parsedData.push(newData);\n      });\n      return {\n        newColumns: parsedColumns,\n        newData: parsedData\n      };\n    };\n\n    this.updateTable = result => {\n      const _this$parseData = this.parseData(result),\n            newColumns = _this$parseData.newColumns,\n            newData = _this$parseData.newData;\n\n      this.setState({\n        columns: newColumns,\n        data: newData\n      });\n      this.saveAllToDb();\n    };\n\n    this.saveAllToDb = () => {\n      fetch(new Request('/db/addAllData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(this.state.data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.addOrUpdateToDb = data => {\n      fetch(new Request('/db/addOrUpdateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.deleteFromDb = data => {\n      fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.setData = column => {\n      console.log(\"SETDATA From TABLE\");\n      console.log(column);\n      var NewData = []; //var column = columns[0].title;\n\n      this.state.data.forEach(function (data) {\n        NewData.push(data[column]);\n      });\n      NewData.sort(this.compare);\n      console.log(NewData);\n      this.props.setData({\n        column: column.toUpperCase(),\n        data: NewData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        id: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"DB chart generator\"), React.createElement(\"div\", {\n        id: \"fileUploader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        accept: \".csv\",\n        type: \"file\",\n        onChange: this.parseCSV,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Database Table\"), React.createElement(MaterialTable, {\n        options: {\n          showTitle: false,\n          toolbarButtonAlignment: \"left\",\n          headerStyle: style,\n          addRowPosition: 'first'\n        },\n        isLoading: this.state.isLoading,\n        columns: this.state.columns,\n        data: this.state.data,\n        search: true,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                this.addOrUpdateToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.addOrUpdateToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.deleteFromDb(oldData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Dialog, {\n        columns: this.state.columns,\n        setData: this.setData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false\n    };\n  }\n\n  compare(a, b) {\n    if (typeof a == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }\n\n}\n\nconst style = {\n  padding: '0px'\n};\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","Papa","MaterialTable","default","Dialog","Table","constructor","props","search","parseCSV","event","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData","result","parsedColumns","parsedData","meta","fields","forEach","field","push","title","toUpperCase","toLowerCase","cellStyle","style","data","newData","key","hasOwnProperty","newColumns","setState","columns","saveAllToDb","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","state","then","response","console","log","catch","error","addOrUpdateToDb","deleteFromDb","setData","column","NewData","sort","compare","render","showTitle","toolbarButtonAlignment","headerStyle","addRowPosition","isLoading","onRowAdd","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","a","b","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Papa from 'papaparse';\n\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\nimport \"../App.css\"\n\n\nclass Table extends Component {\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    columns: [],\n    data: [],\n    isLoading: false,\n  };\n}\n\nsearch = () => {\n\n}\n\nparseCSV = (event) => {\n  Papa.parse(event.target.files[0], {\n    header: true,\n    skipEmptyLines: true,\n    dynamicTyping: true,\n    complete: this.updateTable\n  });\n}\n\nparseData = (result) => {\n\n  var parsedColumns = [];\n  var parsedData = [];\n\n  result.meta.fields.forEach(function(field) {\n    parsedColumns.push({\n      title: field.toUpperCase(),\n      field: field.toLowerCase(),\n      cellStyle: style\n    });\n  });\n\n  result.data.forEach(function(data) {\n    let newData = {};\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        newData[key.toLowerCase()] = data[key]\n      }\n    }\n    parsedData.push(newData);\n  });\n\n  return {\n      newColumns : parsedColumns,\n      newData: parsedData\n  };\n\n}\n\nupdateTable = (result) => {\n  const{ newColumns, newData } = this.parseData(result);\n  this.setState({\n    columns: newColumns,\n    data: newData\n  });\n  this.saveAllToDb();\n}\n\n\nsaveAllToDb = () => {\n  fetch(new Request('/db/addAllData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(this.state.data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n}\n\n\naddOrUpdateToDb = (data) => {\n  fetch(new Request('/db/addOrUpdateData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n\n}\n\n\ndeleteFromDb = (data) => {\n  fetch(new Request('/db/deleteData', {\n      method: 'POST',\n      redirect: 'follow',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }), {\n      credentials: 'include',\n      body: JSON.stringify(data)\n    })\n    .then(response => console.log)\n    .catch(error => console.error)\n}\n\n\nsetData = (column) => {\n\n\n  console.log(\"SETDATA From TABLE\");\n  console.log(column);\n\n  var NewData = [];\n  //var column = columns[0].title;\n\n  this.state.data.forEach(function(data) {\n    NewData.push(\n      data[column]\n    );\n  });\n  NewData.sort(this.compare);\n  console.log(NewData);\n  this.props.setData({\n    column: column.toUpperCase(),\n    data: NewData\n  });\n}\n\ncompare(a, b) {\n  if (typeof(a) == \"number\") {\n    return a - b;\n  } else {\n    if (a > b) {\n      return 1;\n    }\n    if (b > a) {\n      return -1;\n    }\n    return 0;\n  }\n}\n\n  render = () => {\n      return (\n        <div id = \"\">\n        <h2>DB chart generator</h2>\n          <div id = \"fileUploader\">\n          <input\n            accept=\".csv\"\n            type=\"file\"\n            onChange = {this.parseCSV}\n          />\n          </div>\n          <h3>Database Table</h3>\n\n          <MaterialTable\n             options={{\n                showTitle: false,\n                toolbarButtonAlignment: \"left\",\n                headerStyle: style,\n                addRowPosition:'first'\n              }}\n            isLoading={this.state.isLoading}\n            columns={this.state.columns}\n            data={this.state.data}\n            search= {true}\n           editable={{\n             onRowAdd: newData =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     const data = this.state.data;\n                     data.push(newData);\n                     this.addOrUpdateToDb(newData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             onRowUpdate: (newData, oldData) =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     const data = this.state.data;\n                     const index = data.indexOf(oldData);\n                     data[index] = newData;\n                     this.addOrUpdateToDb(newData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             onRowDelete: oldData =>\n               new Promise((resolve, reject) => {\n                 setTimeout(() => {\n                   {\n                     let data = this.state.data;\n                     const index = data.indexOf(oldData);\n                     data.splice(index, 1);\n                     this.deleteFromDb(oldData);\n                     this.setState({ data }, () => resolve());\n                   }\n                   resolve()\n                 }, 1000)\n               }),\n             }}\n           />\n\n        <Dialog columns = {this.state.columns} setData = {this.setData}/>\n      </div>\n      );\n      }\n}\nconst style = {padding:'0px'}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}