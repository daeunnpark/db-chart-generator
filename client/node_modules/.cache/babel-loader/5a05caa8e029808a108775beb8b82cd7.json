{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nrequire('highcharts/modules/no-data-to-display.js')(Highcharts);\n\nclass Chart extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.parseData = props => {\n      var counts = this.countFrequency(props.data);\n      return {\n        newColumn: props.column,\n        newCategories: Object.keys(counts),\n        newBarChartData: Object.values(counts),\n        newPieChartData: this.parse_pie_helper(counts)\n      };\n    };\n\n    this.setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n      this.setState({\n        barChartSettings: {\n          title: {\n            text: newColumn\n          },\n          subtitle: {\n            text: 'Source: kaggle'\n          },\n          xAxis: {\n            visible: true,\n            categories: newCategories\n          },\n          yAxis: {\n            visible: true\n          },\n          series: [{\n            name: newColumn,\n            data: newBarChartData\n          }]\n        },\n        pieChartSettings: {\n          title: {\n            text: newColumn\n          },\n          subtitle: {\n            text: 'Source: kaggle'\n          },\n          series: [{\n            name: newColumn,\n            data: newPieChartData\n          }]\n        }\n      });\n    };\n\n    this.countFrequency = arr => {\n      var counts = {};\n\n      for (var i = 0; i < arr.length; i++) {\n        var data = arr[i];\n        counts[data] = counts[data] ? counts[data] + 1 : 1;\n      }\n\n      return counts;\n    };\n\n    this.parse_pie_helper = counts => {\n      var data = [];\n      Object.keys(counts).forEach(function (key) {\n        let dataObject = {};\n        dataObject = {\n          name: key,\n          y: counts[key]\n        };\n        data.push(dataObject);\n      });\n      return data;\n    };\n\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(this.props);\n\n      const _this$parseData = this.parseData(this.props),\n            newColumn = _this$parseData.newColumn,\n            newCategories = _this$parseData.newCategories,\n            newBarChartData = _this$parseData.newBarChartData,\n            newPieChartData = _this$parseData.newPieChartData;\n\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Charts\"), React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.barChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.pieChartSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Bar Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  xAxis: {\n    visible: false,\n    categories: []\n  },\n  yAxis: {\n    visible: false,\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'count(person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    showInLegend: false,\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n    noData: \"No Data to Display\"\n  },\n  noData: {\n    style: {\n      fontWeight: 'bold',\n      fontSize: '15px',\n      color: '#303030'\n    }\n  }\n};\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Pie Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n    noData: \"No Data to Display\"\n  },\n  noData: {\n    style: {\n      fontWeight: 'bold',\n      fontSize: '15px',\n      color: '#303030'\n    }\n  }\n};\nexport default Chart;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","parseData","counts","countFrequency","data","newColumn","column","newCategories","Object","keys","newBarChartData","values","newPieChartData","parse_pie_helper","setChartData","setState","barChartSettings","title","text","subtitle","xAxis","visible","categories","yAxis","series","name","pieChartSettings","arr","i","length","forEach","key","dataObject","y","push","state","bar_options","pie_options","componentDidUpdate","prevProps","console","log","render","chart","type","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","pointPadding","borderWidth","groupPadding","shadow","showInLegend","colorByPoint","lang","noData","style","fontWeight","fontSize","color","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\nrequire('highcharts/modules/no-data-to-display.js')(Highcharts);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChartSettings: bar_options,\n      pieChartSettings: pie_options\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(this.props);\n      const {\n        newColumn,\n        newCategories,\n        newBarChartData,\n        newPieChartData\n      } = this.parseData(this.props);\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  parseData = (props) => {\n    var counts = this.countFrequency(props.data);\n    return {\n      newColumn: props.column,\n      newCategories: Object.keys(counts),\n      newBarChartData: Object.values(counts),\n      newPieChartData: this.parse_pie_helper(counts)\n    };\n  }\n\n  setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n    this.setState({\n      barChartSettings: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: 'Source: kaggle'\n        },\n        xAxis: {\n          visible:true,\n          categories: newCategories\n        },\n        yAxis: {\n          visible:true,\n        },\n        series: [{\n          name : newColumn,\n          data: newBarChartData\n        }]\n      },\n\n      pieChartSettings: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: 'Source: kaggle'\n        },\n        series: [{\n          name: newColumn,\n          data: newPieChartData\n        }]\n      }\n    });\n  }\n\n  countFrequency = (arr) => {\n    var counts = {};\n    for (var i = 0; i < arr.length; i++) {\n      var data = arr[i];\n      counts[data] = counts[data] ? counts[data] + 1 : 1;\n    }\n    return counts;\n  }\n\n  parse_pie_helper = (counts) => {\n    var data = [];\n    Object.keys(counts).forEach(function(key) {\n      let dataObject = {};\n      dataObject = {\n        name: key,\n        y: counts[key]\n      }\n      data.push(dataObject);\n    });\n    return data;\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>Charts</h3>\n        <div className = 'chartContainer'>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.barChartSettings}\n        />\n        </div>\n        <div className = 'chartContainer'>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options = {this.state.pieChartSettings}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst bar_options = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Bar Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  xAxis: {\n    visible:false,\n    categories: []\n  },\n  yAxis: {\n    visible:false,\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'count(person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    showInLegend: false,\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n    noData: {\n        style: {\n            fontWeight: 'bold',\n            fontSize: '15px',\n            color: '#303030'\n        }\n    }\n}\n\nconst pie_options = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Pie Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n    noData: {\n        style: {\n            fontWeight: 'bold',\n            fontSize: '15px',\n            color: '#303030'\n        }\n    }\n}\n\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}