{"ast":null,"code":"var _jsxFileName = \"/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport \"../App.css\";\nimport Papa from 'papaparse'; // default param in const?\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); // Default\n\n    this.saveToDb = () => {\n      fetch(new Request('/demo/addAllData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(this.state.data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.addToDb = data => {\n      fetch(new Request('/demo/addOrUpdateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.deleteFromDb = data => {\n      //event.preventDefault();\n      console.log(\"called\");\n      fetch(new Request('/demo/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(response => console.log).catch(error => console.error);\n    };\n\n    this.setData = () => {\n      console.log(\"SETDATA From TABLE\");\n      var NewColumns = [];\n      var NewData = [];\n      this.state.columns.forEach(function (column) {\n        NewColumns.push(column.title);\n      });\n      NewData = this.state.data;\n      this.props.setData({\n        columns: NewColumns,\n        data: NewData\n      });\n    };\n\n    this.uploadCsvFile = event => {\n      event.preventDefault();\n      Papa.parse(event.target.files[0], {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: this.updateTable\n      });\n    };\n\n    this.updateTable = result => {\n      var NewColumns = [];\n      var NewData = [];\n      result.meta.fields.forEach(function (field) {\n        NewColumns.push({\n          title: field.toUpperCase(),\n          field: field.toLowerCase()\n        });\n      });\n      result.data.forEach(function (data) {\n        let newObject = {};\n\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            newObject[key.toLowerCase()] = data[key];\n          }\n        }\n\n        NewData.push(newObject);\n      });\n      this.setState({\n        columns: NewColumns,\n        data: NewData\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"FileUploadBtn\",\n        variant: \"contained\",\n        component: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Upload File\", React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        style: {\n          display: \"none\"\n        },\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        id: \"contained-button-file\",\n        onChange: this.uploadCsvFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        component: \"span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Upload\")), React.createElement(MaterialTable, {\n        title: \"Table\",\n        columns: this.state.columns,\n        data: this.state.data,\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                data.push(newData);\n                console.log(newData);\n                this.addToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                const data = this.state.data;\n                const index = data.indexOf(oldData);\n                data[index] = newData;\n                this.addToDb(newData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              {\n                let data = this.state.data;\n                const index = data.indexOf(oldData);\n                data.splice(index, 1);\n                this.deleteFromDb(oldData);\n                this.setState({\n                  data\n                }, () => resolve());\n              }\n              resolve();\n            }, 1000);\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.saveToDb,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Save to DB\"), React.createElement(\"button\", {\n        onClick: this.setData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"UpdateChart\"));\n    };\n\n    this.state = {\n      columns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'COL2',\n        field: 'col2',\n        type: 'numeric'\n      }, {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      }, {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      }],\n      data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      }, {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      }]\n    };\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/Daeun/Desktop/db-chart-generator/src/main/js/src/components/Table.js"],"names":["React","Component","MaterialTable","Button","Papa","Table","constructor","props","saveToDb","fetch","Request","method","redirect","headers","Headers","credentials","body","JSON","stringify","state","data","then","response","console","log","catch","error","addToDb","deleteFromDb","setData","NewColumns","NewData","columns","forEach","column","push","title","uploadCsvFile","event","preventDefault","parse","target","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","result","meta","fields","field","toUpperCase","toLowerCase","newObject","key","hasOwnProperty","setState","render","display","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","type","id","col2","col3","col4"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Button from '@material-ui/core/Button';\nimport \"../App.css\"\n\nimport Papa from 'papaparse';\n\n// default param in const?\nclass Table extends Component {\nconstructor(props) {\n  super(props);\n  // Default\n  this.state = {\n    columns: [{\n        title: 'ID',\n        field: 'id'\n      },\n      {\n        title: 'COL2',\n        field: 'col2',\n        type: 'numeric'\n      },\n      {\n        title: 'COL3',\n        field: 'col3',\n        type: 'numeric'\n      },\n      {\n        title: 'COL4',\n        field: 'col4',\n        type: 'numeric'\n      },\n    ],\n\n    data: [{\n        id: \"A\",\n        col2: 80,\n        col3: 30,\n        col4: 40\n      },\n      {\n        id: \"B\",\n        col2: 30,\n        col3: 20,\n        col4: 10\n      },\n    ]\n  };\n}\n\n\nsaveToDb = () => {\n\nfetch(new Request('/demo/addAllData', {\n    method: 'POST',\n    redirect: 'follow',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    })\n  }), {\n    credentials: 'include',\n    body: JSON.stringify(this.state.data)\n  })\n  .then(response => console.log)\n  .catch(error => console.error)\n\n}\n\n\naddToDb = (data) => {\n\n\nfetch(new Request('/demo/addOrUpdateData', {\n    method: 'POST',\n    redirect: 'follow',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    })\n  }), {\n    credentials: 'include',\n    body: JSON.stringify(data)\n  })\n  .then(response => console.log)\n  .catch(error => console.error)\n\n}\n\n\ndeleteFromDb = (data) => {\n  //event.preventDefault();\n\nconsole.log(\"called\");\n\nfetch(new Request('/demo/deleteData', {\n    method: 'POST',\n    redirect: 'follow',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    })\n  }), {\n    credentials: 'include',\n    body: JSON.stringify(data)\n  })\n  .then(response => console.log)\n  .catch(error => console.error)\n\n}\n\n\n\n\n// Table To Parent APP\nsetData = () => {\n  console.log(\"SETDATA From TABLE\");\n\n  var NewColumns = [];\n  var NewData = [];\n\n  this.state.columns.forEach(function(column) {\n    NewColumns.push(\n      column.title\n    );\n  });\n\n  NewData = this.state.data;\n\n  this.props.setData({\n    columns: NewColumns,\n    data: NewData\n  });\n\n}\n\n\nuploadCsvFile = (event) => {\n  event.preventDefault();\n\n  Papa.parse(event.target.files[0], {\n    header: true,\n    skipEmptyLines: true,\n    dynamicTyping: true,\n    complete: this.updateTable\n  });\n}\n\n\nupdateTable = (result) => {\n\n  var NewColumns = [];\n  var NewData = [];\n\n  result.meta.fields.forEach(function(field) {\n    NewColumns.push({\n      title: field.toUpperCase(),\n      field: field.toLowerCase()\n    });\n  });\n\n  result.data.forEach(function(data) {\n    let newObject = {};\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        newObject[key.toLowerCase()] = data[key]\n      }\n    }\n    NewData.push(newObject);\n  });\n\n  this.setState({\n    columns: NewColumns,\n    data: NewData\n  });\n\n}\n    render = () => {\n        return (\n          <div>\n            <Button\n            id = \"FileUploadBtn\"\n            variant=\"contained\"\n            component=\"label\"\n            >\n            Upload File\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              style={{ display: \"none\" }}\n              onChange = {this.uploadCsvFile}\n            />\n            </Button>\n\n\n\n\n\n            <input\n                    type=\"file\"\n                    accept=\".csv\"\n                    id=\"contained-button-file\"\nonChange = {this.uploadCsvFile}\n                  />\n                  <label htmlFor=\"contained-button-file\">\n                    <Button variant=\"contained\" component=\"span\">\n                      Upload\n                    </Button>\n                  </label>\n\n            <MaterialTable\n               title=\"Table\"\n               columns={this.state.columns}\n               data={this.state.data}\n               editable={{\n                 onRowAdd: newData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         const data = this.state.data;\n                         data.push(newData);\n                         console.log(newData);\n                         this.addToDb(newData);\n\n                         this.setState({ data }, () => resolve());\n\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowUpdate: (newData, oldData) =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         const data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data[index] = newData;\n                         this.addToDb(newData);\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n                 onRowDelete: oldData =>\n                   new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                       {\n                         let data = this.state.data;\n                         const index = data.indexOf(oldData);\n                         data.splice(index, 1);\n                         this.deleteFromDb(oldData);\n\n                         this.setState({ data }, () => resolve());\n                       }\n                       resolve()\n                     }, 1000)\n                   }),\n               }}\n             />\n           <button onClick = {this.saveToDb}>Save to DB</button>\n           <button onClick = {this.setData}>UpdateChart</button>\n        </div>\n        );\n        }\n}\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}