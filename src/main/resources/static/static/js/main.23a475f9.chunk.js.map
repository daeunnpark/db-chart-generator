{"version":3,"sources":["components/Chart.js","chartSettings/defaultOptions.js","components/UpdateChartsDialog.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["require","Highcharts","defaultOptions_bar","chart","type","title","text","subtitle","xAxis","visible","categories","yAxis","min","tickInterval","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","groupPadding","shadow","series","showInLegend","colorByPoint","data","lang","noData","style","fontWeight","fontSize","color","defaultOptions_pie","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","enabled","format","source","Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseData","counts","countFrequency","newColumn","newCategories","keys","newBarChartData","values","newPieChartData","parseData_helper","arr","forEach","key","dataObject","name","y","push","i","length","setChartData","setState","barChart","pieChart","state","prevProps","_this$parseData","react_default","a","createElement","className","highcharts_react_min_default","highcharts","options","Component","UpdateChartsDialog","handleChange","event","value","target","handleOpen","open","handleOk","setSelectedCategoryData","handleClose","render","Button","id","variant","onClick","Dialog","disableBackdropClick","disableEscapeKeyDown","onClose","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","columns","map","FormControlLabel","field","control","Radio","label","DialogActions","Table","parseCsv","Papa","parse","files","header","skipEmptyLines","dynamicTyping","complete","updateTable","parseData_table","result","parsedColumns","parsedData","meta","fields","toUpperCase","toLowerCase","cellStyle","newData","hasOwnProperty","newColumns","_this$parseData_table","addAllDataToDb","temp","assertThisInitialized","addDataToDb","fetch","Request","method","redirect","headers","Headers","Content-Type","credentials","body","JSON","stringify","then","response","catch","error","window","alert","message","updateDataInDb","console","log","deleteDataFromDb","category","sort","compare","accept","htmlFor","dist_default","showTitle","toolbarButtonAlignment","headerStyle","addRowPosition","isLoading","search","editable","onRowAdd","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","deleteFromDb","localization","actions","emptyDataSourceMessage","components_UpdateChartsDialog","b","padding","App","newState","Fragment","components_Table","components_Chart","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23a475f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nimport * as defaultOptions from '../chartSettings/defaultOptions';\n\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\nrequire('highcharts/modules/no-data-to-display.js')(Highcharts);\n\nconst defaultOptions_bar = defaultOptions.BAR;\nconst defaultOptions_pie = defaultOptions.PIE;\nconst source = defaultOptions.SOURCE;\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChart: defaultOptions_bar,\n      pieChart: defaultOptions_pie\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      const {\n        newColumn,\n        newCategories,\n        newBarChartData,\n        newPieChartData\n      } = this.parseData(this.props);\n      this.setChartData(newColumn, newCategories, newBarChartData, newPieChartData);\n    }\n  }\n\n  parseData = (props) => {\n    var counts = this.countFrequency(props.data);\n    return {\n      newColumn: props.column,\n      newCategories: Object.keys(counts),\n      newBarChartData: Object.values(counts),\n      newPieChartData: this.parseData_helper(counts)\n    };\n  }\n\n  parseData_helper = (counts) => {\n    var arr = [];\n    Object.keys(counts).forEach(function(key) {\n      let dataObject = {};\n      dataObject = {\n        name: key,\n        y: counts[key]\n      }\n      arr.push(dataObject);\n    });\n    return arr;\n  }\n\n  countFrequency = (arr) => {\n    var counts = {};\n    for (var i = 0; i < arr.length; i++) {\n      var data = arr[i];\n      counts[data] = counts[data] ? counts[data] + 1 : 1;\n    }\n    return counts;\n  }\n\n\n  setChartData = (newColumn, newCategories, newBarChartData, newPieChartData) => {\n    this.setState({\n      barChart: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: source\n        },\n        xAxis: {\n          visible:true,\n          categories: newCategories\n        },\n        yAxis: {\n          visible:true,\n        },\n        series: [{\n          name : newColumn,\n          data: newBarChartData\n        }]\n      },\n      pieChart: {\n        title: {\n          text: newColumn\n        },\n        subtitle: {\n          text: source\n        },\n        series: [{\n          name: newColumn,\n          data: newPieChartData\n        }]\n      }\n    });\n  }\n\n\n  render(){\n    return(\n      <div className= 'Section'>\n        <h2>Charts</h2>\n          <div className = 'chartContainer'>\n            <HighchartsReact\n              highcharts={Highcharts}\n              options = {this.state.barChart}/>\n            </div>\n          <div className = 'chartContainer'>\n            <HighchartsReact\n              highcharts={Highcharts}\n              options = {this.state.pieChart}/>\n            </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Chart;\n","export const SOURCE= 'Source: kaggle';\n\nexport const BAR = {\n  chart: {\n    type: 'column'\n  },\n  title: {\n    text: 'Bar Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  xAxis: {\n    visible:false,\n    categories: []\n  },\n  yAxis: {\n    visible:false,\n    min: 0,\n    tickInterval: 1,\n    title: {\n      text: 'count(person)'\n    }\n  },\n  tooltip: {\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n      '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n    footerFormat: '</table>',\n    shared: true,\n    useHTML: true\n  },\n  plotOptions: {\n    column: {\n      pointPadding: 0,\n      borderWidth: 1,\n      groupPadding: 0.2,\n      shadow: false\n    }\n  },\n  series: [{\n    showInLegend: false,\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n  noData: {\n      style: {\n          fontWeight: 'bold',\n          fontSize: '15px',\n          color: '#303030'\n      }\n  }\n};\n\n\nexport const PIE = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie'\n  },\n  title: {\n    text: 'Pie Chart'\n  },\n  subtitle: {\n    text: ''\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n      }\n    }\n  },\n  series: [{\n    colorByPoint: true,\n    data: []\n  }],\n  lang: {\n        noData: \"No Data to Display\"\n    },\n  noData: {\n      style: {\n          fontWeight: 'bold',\n          fontSize: '15px',\n          color: '#303030'\n      }\n  }\n};\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport \"../App.css\"\n\n\nclass UpdateChartsDialog extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      value: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        columns: this.props.columns\n      })\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleOk = () => {\n    this.setState({\n      open: false\n    });\n    this.props.setSelectedCategoryData(this.state.value);\n  }\n\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  }\n\n\n  render = () => {\n      return (\n          <div>\n            <Button id ='updateChartsBtn' variant=\"contained\" color=\"secondary\" onClick={this.handleOpen} className = 'Btn' > Update Charts</Button>\n            <Dialog disableBackdropClick disableEscapeKeyDown open={this.state.open} onClose={this.handleClose}>\n              <DialogTitle>Choose a category to generate charts.</DialogTitle>\n              <DialogContent>\n                <form>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Category</FormLabel>\n                  <RadioGroup\n                    aria-label=\"Category\"\n                    name=\"category\"\n                    value={this.state.value}\n                    onChange={this.handleChange}>\n                    { this.props.columns.map((column) =>(\n                        <FormControlLabel key = {column.field} value={column.field} control={<Radio />} label={column.title} /> ))\n                    }\n                  </RadioGroup>\n                </FormControl>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={this.handleOk} color=\"primary\">\n                  Ok\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        );\n      }\n}\n\n\nexport default UpdateChartsDialog;\n","import React, { Component } from 'react';\n\nimport Papa from 'papaparse';\n\nimport Button from '@material-ui/core/Button';\nimport MaterialTable from 'material-table';\nimport { default as Dialog } from './UpdateChartsDialog';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      isLoading: false,\n    };\n  }\n\n  parseCsv = (event) => {\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateTable\n    });\n  }\n\n  parseData_table = (result) => {\n\n    var parsedColumns = [];\n    var parsedData = [];\n\n    result.meta.fields.forEach(function(field) {\n      parsedColumns.push({\n        title: field.toUpperCase(),\n        field: field.toLowerCase(),\n        cellStyle: style\n      });\n    });\n    (parsedColumns[0])['editable']='onAdd';\n\n    result.data.forEach(function(data) {\n      let newData = {};\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          newData[key.toLowerCase()] = data[key]\n        }\n      }\n      parsedData.push(newData);\n    });\n\n    return {\n        newColumns : parsedColumns,\n        newData: parsedData\n    };\n  }\n\n  updateTable = (result) => {\n    const{ newColumns, newData } = this.parseData_table(result);\n    this.setState({\n      columns: newColumns,\n      data: newData\n    });\n    this.addAllDataToDb();\n  }\n\n  addAllDataToDb = () => {\n    var temp = this;\n    this.state.data.forEach(function(data) {\n      temp.addDataToDb(data);\n    });\n  }\n\n  addDataToDb = (data) => {\n    fetch(new Request('/db/addData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(function(response) {\n      })\n      .catch(function(error) {\n        window.alert('There has been a problem with your fetch operation: ' + error.message);\n      });\n  }\n\n\n  updateDataInDb = (data) => {\n    fetch(new Request('/db/updateData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .catch(error => console.error)\n  }\n\n  deleteDataFromDb = (data) => {\n    fetch(new Request('/db/deleteData', {\n        method: 'POST',\n        redirect: 'follow',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }), {\n        credentials: 'include',\n        body: JSON.stringify(data)\n      })\n      .then(response => console.log)\n      .catch(error => console.error)\n  }\n\n\n  setSelectedCategoryData = (category) => {\n    var newData = [];\n    this.state.data.forEach(function(data) {\n      newData.push(\n        data[category]\n      );\n    });\n    newData.sort(this.compare);\n    this.props.setChartData({\n      column: category.toUpperCase(),\n      data: newData\n    });\n  }\n\n  compare(a, b) {\n    if (typeof(a) == \"number\") {\n      return a - b;\n    } else {\n      if (a > b) {\n        return 1;\n      }\n      if (b > a) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n\n  render = () => {\n      return (\n        <div>\n          <h1>DB chart generator</h1>\n          <div className = 'Section'>\n            <input\n              id=\"contained-button-file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange = {this.parseCsv}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button id = 'uploadBtn' variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload CSV File\n              </Button>\n            </label>\n\n            <h2>Database Table</h2>\n            <MaterialTable\n              options = {{\n                  showTitle: false,\n                  toolbarButtonAlignment: 'left',\n                  headerStyle: style,\n                  addRowPosition:'first'\n              }}\n              isLoading = {this.state.isLoading}\n              columns = {this.state.columns}\n              data=  {this.state.data}\n              search = {true}\n              editable = {{\n                onRowAdd: newData =>\n                 new Promise((resolve, reject) => {\n                     setTimeout(() => {\n                         {\n                             const data = this.state.data;\n                             data.push(newData);\n                             this.addDataToDb(data);\n                             this.setState({ data }, () => resolve());\n                         }\n                         resolve();\n                     }, 1000);\n                 }),\n               onRowUpdate: (newData, oldData) =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       const data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data[index] = newData;\n                       this.updateDataInDb(newData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               onRowDelete: oldData =>\n                 new Promise((resolve, reject) => {\n                   setTimeout(() => {\n                     {\n                       let data = this.state.data;\n                       const index = data.indexOf(oldData);\n                       data.splice(index, 1);\n                       this.deleteFromDb(oldData);\n                       this.setState({ data }, () => resolve());\n                     }\n                     resolve()\n                   }, 1000)\n                 }),\n               }}\n               localization={{\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No Data to Display',\n                    }\n                }}\n             />\n            <Dialog columns = {this.state.columns} setSelectedCategoryData = {this.setSelectedCategoryData}/>\n          </div>\n        </div>\n      );\n    }\n}\n\nconst style = { padding:'0px' }\n\nexport default Table;\n","import React, { Component } from 'react';\nimport 'whatwg-fetch';\nimport './App.css';\nimport Chart from \"./components/Chart\"\nimport Table from \"./components/Table\"\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      column: [],\n      data: [],\n    };\n  }\n\n  setChartData = (newState) => {\n    this.setState(newState);\n  }\n\n  render = () => {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <Table setChartData = {this.setChartData}/>\n          <Chart column = {this.state.column} data = {this.state.data}/>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n\n\n/**/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}